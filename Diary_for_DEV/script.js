// DB Í¥ÄÎ†®
let db; // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Í∞ùÏ≤¥
const DB_NAME = 'sqliteDB'; // IndexedDB Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïù¥Î¶Ñ

// SQLite ÌôòÍ≤Ω Ï¥àÍ∏∞Ìôî
async function initDatabase() {
    const SQL = await initSqlJs({
        locateFile: file => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/${file}`
    });

    // 1) Î∏åÎùºÏö∞Ï†Ä IndexedDB Î•º ÌÜµÌïú Ï¥àÍ∏∞Ìôî
    const savedDb = await loadDBFromIdxDB();
    if (savedDb) {
        db = new SQL.Database(new Uint8Array(savedDb));
        console.log("‚úÖ Î∏åÎùºÏö∞Ï†Ä IndexedDB ÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å!");
        displayUsers();
        return;
    }

    // 2) ÏÉàÎ°úÏö¥ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉùÏÑ±
    db = new SQL.Database();
    db.run(`
        CREATE TABLE IF NOT EXISTS user (
            user_id     INTEGER PRIMARY KEY AUTOINCREMENT,      -- ÏÇ¨Ïö©Ïûê ID
            username    TEXT UNIQUE NOT NULL COLLATE NOCASE,    -- ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ
            email       TEXT UNIQUE NOT NULL,                   -- Ïù¥Î©îÏùº
            password    TEXT NOT NULL,                          -- ÎπÑÎ∞ÄÎ≤àÌò∏
            lv          INTEGER DEFAULT 1,                      -- Î†àÎ≤®
            xp          INTEGER DEFAULT 0,                      -- Í≤ΩÌóòÏπò
            img         TEXT DEFAULT 'default_profile.png'      -- ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ
        );
    `);
    db.run(`
        CREATE TABLE IF NOT EXISTS diary_event (
            event_id    INTEGER PRIMARY KEY AUTOINCREMENT,  -- Ïù¥Î≤§Ìä∏ ID
            user_id     INTEGER NOT NULL,                   -- ÏÇ¨Ïö©Ïûê ID
            title       TEXT NOT NULL,                      -- Ï†úÎ™©
            com_lang    TEXT NOT NULL,                      -- Í¥ÄÎ†® Ïñ∏Ïñ¥
            memo        TEXT,                               -- Î©îÎ™®
            date        TEXT NOT NULL,                      -- ÎÇ†Ïßú
            completed   BOOLEAN DEFAULT FALSE,              -- ÏôÑÎ£å Ïó¨Î∂Ä
            
            FOREIGN KEY (user_id) REFERENCES user(user_id)
        );
    `);
    db.run(`
        CREATE TABLE IF NOT EXISTS achievement (
            ach_id  INTEGER PRIMARY KEY AUTOINCREMENT,-- ÏóÖÏ†Å ID
            title   TEXT NOT NULL,  -- ÏóÖÏ†ÅÎ™Ö
            flavor  TEXT NOT NULL,  -- ÏóÖÏ†Å ÏÑ§Î™Ö
            trigger TEXT NOT NULL,  -- ÏóÖÏ†Å Îã¨ÏÑ± Ï°∞Í±¥
            img     TEXT NOT NULL   -- ÏóÖÏ†Å Ïù¥ÎØ∏ÏßÄ
        );
    `);
    db.run(`
        CREATE TABLE IF NOT EXISTS user_achievement (
            user_id INTEGER NOT NULL,   -- ÏÇ¨Ïö©Ïûê ID
            ach_id  INTEGER NOT NULL,   -- ÏóÖÏ†Å ID
            
            FOREIGN KEY (user_id) REFERENCES user(user_id),
            FOREIGN KEY (ach_id) REFERENCES achievement(ach_id),
            PRIMARY KEY (user_id, ach_id)
        );
    `);
    console.warn("‚ö†Ô∏è ÏÉàÎ°ú Î∏åÎùºÏö∞Ï†Ä DB ÏÉùÏÑ± (Îπà Ïä§ÌÇ§Îßà Ï¥àÍ∏∞Ìôî)");
}

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ IndexedDBÏóê Ï†ÄÏû•
function saveDBToIdxDB() {
    const dbData = db.export();
    const buffer = dbData.buffer; // ArrayBuffer Ï∂îÏ∂ú
    const request = indexedDB.open(DB_NAME, 1);
    request.onsuccess = (event) => {
        const db = event.target.result;
        // Ïò§Î∏åÏ†ùÌä∏ Ïä§ÌÜ†Ïñ¥ Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
        if (!db.objectStoreNames.contains("sqliteDB")) {
            console.log("‚ùå 'sqliteDB' Ïò§Î∏åÏ†ùÌä∏ Ïä§ÌÜ†Ïñ¥Í∞Ä ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏïÑ Ï¢ÖÎ£åÌï©ÎãàÎã§.");
        }
        const transaction = db.transaction("sqliteDB", "readwrite");
        const store = transaction.objectStore("sqliteDB");
        const putRequest = store.put(buffer, "db");
        putRequest.onsuccess = () => {
            console.log("üíæ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Í∞Ä IndexedDBÏóê ÏïàÏ†ÑÌïòÍ≤å Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.");
        };
        putRequest.onerror = (err) => {
            console.error("‚ùå IndexedDB Ï†ÄÏû• Ïã§Ìå®:", err);
        };
        // Ìä∏ÎûúÏû≠ÏÖò ÏôÑÎ£å ÏãúÏ†êÍπåÏßÄ Í∏∞Îã§Î¶¨Í∏∞
        transaction.oncomplete = () => {
            console.log("‚úÖ (DB Ï†ÄÏû•) IndexedDB Ìä∏ÎûúÏû≠ÏÖò ÏôÑÎ£å");
        }
    };
    request.onerror = (err) => {
        console.error("‚ùå IndexedDB Ïó¥Í∏∞ Ïã§Ìå®:", err);
    };
    request.onupgradeneeded = (event) => {
        const db = event.target.result;
        db.createObjectStore("sqliteDB");
    };
}

// IndexedDB ÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î∂àÎü¨Ïò§Í∏∞
async function loadDBFromIdxDB() {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open(DB_NAME, 1);
        request.onsuccess = (event) => {
            const db = event.target.result;
            // Ïò§Î∏åÏ†ùÌä∏ Ïä§ÌÜ†Ïñ¥ Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
            if (!db.objectStoreNames.contains("sqliteDB")) {
                console.warn("‚ö†Ô∏è 'sqliteDB' Ïò§Î∏åÏ†ùÌä∏ Ïä§ÌÜ†Ïñ¥Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.");
                resolve(null);
                return;
            }
            const transaction = db.transaction("sqliteDB", "readonly");
            const store = transaction.objectStore("sqliteDB");
            const getRequest = store.get("db");
            getRequest.onsuccess = () => {
                resolve(getRequest.result ? getRequest.result.arrayBuffer() : null);
            };
            getRequest.onerror = () => reject("‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î°úÎî© Ïã§Ìå®");
            // Ìä∏ÎûúÏû≠ÏÖò ÏôÑÎ£å ÏãúÏ†ê Î™ÖÌôïÌûà Ï≤òÎ¶¨
            transaction.oncomplete = () => {
                console.log("‚úÖ IndexedDB Ìä∏ÎûúÏû≠ÏÖò ÏôÑÎ£å");
            };
        };
        request.onerror = () => reject("‚ùå IndexedDB Ïó¥Í∏∞ Ïã§Ìå®");
    });
}

// IndexedDBÏùò DB ÏÇ≠Ï†ú (Ï¥àÍ∏∞Ìôî)
// ÌÖçÏä§Ìä∏ Î™©Ï†ÅÏúºÎ°ú ÏΩòÏÜîÏóêÏÑúÎßå ÏÇ¨Ïö©Ìï† Í≤É!
async function clearIdxDB() {
    console.log("üóë IndexedDB ÏÇ≠Ï†ú ÏãúÏûë...");
    // ÌòÑÏû¨ IndexedDB Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
    const databases = await indexedDB.databases();
    const dbExists = databases.some(db => db.name === DB_NAME);
    if (!dbExists) {
        console.log("üìÇ IndexedDBÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå. ÏÇ≠Ï†ú ÏûëÏóÖÏùÑ Ï§ëÎã®Ìï©ÎãàÎã§.");
        return;  // ‚ùå DBÍ∞Ä ÏóÜÏúºÎ©¥ Ìï®Ïàò Ï¢ÖÎ£å
    }

    console.log("üîí Ïó¥Î¶∞ IndexedDB Îã´Í∏∞...");
    const request = indexedDB.open(DB_NAME);
    request.onsuccess = (event) => {
        const db = event.target.result;
        db.close();  // DB Îã´Í∏∞
        console.log("‚úÖ IndexedDB Ïó∞Í≤∞ Îã´Ïùå. ÏÇ≠Ï†ú ÏãúÏûë...");
        deleteDatabase();
    };
    request.onerror = (err) => {
        console.error("‚ùå DB Ïó¥Í∏∞ Ïã§Ìå®:", err);
    };
}

// ÌöåÏõê Ï∂îÍ∞Ä(ÏΩòÏÜîÏö©)
function addUser(name, email, password) {
    db.run("INSERT INTO user (username, email, password) VALUES (?, ?, ?)", [name, email, password]);
    displayUsers();
}

// ÌöåÏõê Î™©Î°ù ÌëúÏãú(ÏΩòÏÜîÏö©)
function displayUsers() {
    const result = db.exec("SELECT * FROM user");
    console.log(result);
}

// ÌöåÏõê Ï†ïÎ≥¥ ÏàòÏ†ï(ÌòÑÏû¨Îäî ÏΩòÏÜîÏö©)
function updateUser(name, email, password, lv, xp, img, id) {
    db.run("UPDATE user SET username=?, email=?, password=?, lv=?, xp=?, img=? WHERE user_id=?", [name, email, password, lv, xp, img, id]);
    displayUsers();
}

// ÌöåÏõê ÏÇ≠Ï†ú(ÌòÑÏû¨Îäî ÏΩòÏÜîÏö©)
function deleteUser(id) {
    db.run("DELETE FROM user WHERE user_id=?", [id]);
    displayUsers();
}

// ÌéòÏù¥ÏßÄÍ∞Ä Î°úÎìúÎê† Îïå Ïã§ÌñâÎêòÎäî Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
document.addEventListener("DOMContentLoaded", function () {
    const banner = document.querySelector(".banner");
    const messages = [
        "üöÄ ÏΩîÎìú Ìïú Ï§ÑÏù¥ ÏÑ∏ÏÉÅÏùÑ Î∞îÍæºÎã§!",
        "üêû Î≤ÑÍ∑∏ ÏóÜÎäî ÏΩîÎìú? Ïã†ÌôîÏùº Îøê!",
        "üí° Ï£ºÏÑùÏù¥ ÏóÜÎäî ÏΩîÎìúÎäî ÎßàÎ≤ïÏù¥Îã§. Ïù¥Ìï¥Ìï† Ïàò ÏóÜÏúºÎãàÍπå!",
        "üî® 'ÏûëÎèôÌïòÎ©¥ Í±¥Îì§ÏßÄ ÎßàÎùº' - Í∞úÎ∞úÏûêÏùò Ï≤†Ìïô",
        "‚ö° console.log('ÎîîÎ≤ÑÍπÖ Ï§ë...')",
        "üåé JavaÎäî Ïª§Ìîº, JavaScriptÎäî Ïä§ÌÅ¨Î¶ΩÌä∏!",
        "‚è≥ 99% ÏôÑÎ£å? ÎÇ®ÏùÄ 1%Í∞Ä 99%Ïùò ÏãúÍ∞Ñ!",
        "üî• GitÏùÄ Í∏∞ÏñµÌïòÏßÄ ÏïäÎäîÎã§. ÌïòÏßÄÎßå Î°úÍ∑∏Îäî Í∏∞ÏñµÌïúÎã§.",
        "üöß ÎÇ¥ ÏΩîÎìúÎäî Ïûò ÎèåÏïÑÍ∞Ä, ÌïòÏßÄÎßå Ïù¥Ïú†Îäî Î™∞Îùº!",
        "üìå Stack OverflowÍ∞Ä ÏóÜÏúºÎ©¥ Í∞úÎ∞úÏù¥ Ïïà Îèº!",
        "üéØ 'Ïù¥Í±¥ ÏûÑÏãú ÏΩîÎìúÏïº' - 10ÎÖÑ ÏßÄÎÇú ÏΩîÎìú",
        "üñ•Ô∏è 'Ïù¥ÏÉÅÌïòÎÑ§, ÎÇ¥ Ïª¥Ìì®ÌÑ∞ÏóêÏÑúÎäî ÎêòÎäîÎç∞?'",
        "üíæ 'Ctrl + S'Îäî ÎÇ¥ ÏÉùÎ™ÖÏ§Ñ",
        "üìú TODO: ÎÇòÏ§ëÏóê Î¶¨Ìå©ÌÜ†ÎßÅÌïòÍ∏∞ (Ï†àÎåÄ Ïïà Ìï®)",
        "üé≠ CSSÎäî ÎßàÎ≤ïÏù¥Îã§. ÏòàÏÉÅÎåÄÎ°ú ÎèôÏûëÌï† ÎïåÍ∞Ä ÏóÜÎã§„ÄÇ",
        "üåê HTMLÏùÄ ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç Ïñ∏Ïñ¥Í∞Ä ÏïÑÎãàÎã§! ÌïòÏßÄÎßå ÏóÜÏúºÎ©¥ ÏõπÎèÑ ÏóÜÎã§!",
        "üíÄ 'undefined'Îäî Í∞úÎ∞úÏûêÏùò ÏµúÏïÖÏùò ÏïÖÎ™Ω",
        "üìå nullÍ≥º undefinedÏùò Ï∞®Ïù¥Î•º ÏïàÎã§Î©¥ Ïù¥ÎØ∏ Í≥†ÏàòÎã§.",
        "üîÅ while(true) { work(); sleep(0); } // Í∞úÎ∞úÏûêÏùò ÌòÑÏã§",
        "üîß 'Ïù¥Í±¥ Ïâ¨Ïö¥ ÏàòÏ†ïÏù¥Ïïº'ÎùºÍ≥† ÎßêÌïòÎ©¥ Ïïà Îèº...",
        "ü§Ø Í∞úÎ∞úÏûêÎäî ÏΩîÎìúÎ•º ÏßúÎäî Í≤å ÏïÑÎãàÎùº Î≤ÑÍ∑∏Î•º Í≥†ÏπòÎäî ÏßÅÏóÖÏù¥Îã§„ÄÇ",
        "üöÄ Ïª¥ÌååÏùºÏùÄ ÏÑ±Í≥µÌñàÏßÄÎßå Ïã§ÌñâÏùÄ Ïïà ÎêúÎã§? Ï∂ïÌïòÌï©ÎãàÎã§, ÏßÑÏ†ïÌïú Í∞úÎ∞úÏûêÏûÖÎãàÎã§!",
        "ü§ñ AIÍ∞Ä ÏΩîÎìúÎ•º ÏßúÎäî ÎÇ†Ïù¥ ÏôÄÎèÑ, Î≤ÑÍ∑∏Îäî Ïö∞Î¶¨Í∞Ä Í≥†Ï≥êÏïº ÌïúÎã§!",
        "üí° 'ÏùºÎã® ÏûëÎèôÌïòÍ≤å ÎßåÎì§Í≥†, ÎÇòÏ§ëÏóê ÍπîÎÅîÌïòÍ≤å Ï†ïÎ¶¨ÌïòÏûê' - ÏòÅÏõêÌûà Ï†ïÎ¶¨ÎêòÏßÄ ÏïäÏùå",
        "üî• 'Ïù¥Í±∞ Ïôú Ïïà Îèº?' Î≥¥Îã§ Îçî Î¨¥ÏÑúÏö¥ Îßê: 'Ïù¥Í±∞ Ïôú Îèº?'",
        "üïµÔ∏è 'ÎÑ§Ìä∏ÏõåÌÅ¨ Î¨∏Ï†úÏùº ÏàòÎèÑ ÏûàÏñ¥' - Î™®Îì† Î¨∏Ï†úÏùò ÎßåÎä• Î≥ÄÎ™Ö",
        "üêõ 'Ïù¥Í±∞ Î∂ÑÎ™ÖÌûà Ïñ¥Ï†úÎäî Ïûò ÎêêÎäîÎç∞‚Ä¶'",
        "üîÑ 'ÏÉàÎ≤Ω 2ÏãúÏóê Í∏âÌïòÍ≤å ÏàòÏ†ïÌïú ÏΩîÎìúÍ∞Ä Ï†úÏùº Ïò§Îûò ÏÇ¥ÏïÑÎÇ®ÎäîÎã§'",
        "üõ†Ô∏è 'Ìïú Ï§ÑÎßå Î∞îÍø®ÎäîÎç∞, Îã§ ÎßùÍ∞ÄÏ°åÎã§'",
        "üé≠ 'Î¶¨Ìå©ÌÜ†ÎßÅ'Ïù¥ÎûÄ ÏΩîÎìúÎ•º Í≥†ÏπòÎäî Í≤å ÏïÑÎãàÎùº Îã§Ïãú ÏßúÎäî Í≤É",
        "üöÄ 'Ïù¥Í±∞ ÌîÑÎ°úÎçïÏÖòÏóê Ïò¨Î†§ÎèÑ Í¥úÏ∞ÆÍ≤†ÏßÄ?' - Í∞ÄÏû• ÏúÑÌóòÌïú Îßê",
        "üíæ 'Ïö∞Î¶¨ ÏÑúÎπÑÏä§Îäî ÏïàÏ†ÑÌï¥! Îß§Ïùº AWSÏóê 5Îã¨Îü¨Î•º Ïì∞Í≥† ÏûàÍ±∞Îì†!'",
        "ü§Ø 'Ïù¥ ÏΩîÎìúÎ•º ÏûëÏÑ±Ìïú ÏÇ¨Îûå ÎàÑÍµ¨Ïïº?' (Git blame ÌñàÎçîÎãà ÎÇòÏò¥)",
        "üï∂Ô∏è 'Ïù¥Í±∞ ÎåÄÏ∂© ÏßúÍ≥† ÎÇòÏ§ëÏóê Í≥†ÏπòÏûê' = Ï†àÎåÄ Í≥†ÏπòÏßÄ ÏïäÏùå",
        "üíÄ 'ÏÑ§Îßà Ïù¥Í±∞ Ìïú Ï§Ñ Î∞îÍæºÎã§Í≥† ÌÑ∞ÏßÄÍ≤†Ïñ¥?' -> ÌÑ∞Ïßê",
        "üïπÔ∏è 'Ïïº, Ïù¥Í±∞ Ïôú Ïïà Îèº?' 'Ï∫êÏãú ÏßÄÏõ†Ïñ¥?' 'Ïñ¥‚Ä¶'",
        "üß© 'Î∞∞Ìè¨ Ï†ÑÏóê ÌÖåÏä§Ìä∏ Ìï¥Î¥§Ïñ¥?' 'ÏïÑÎãà, Í∑ºÎç∞ ÎÇ¥ Î°úÏª¨ÏóêÏÑúÎäî Ïûò ÎêêÏñ¥!'",
        "üîé 'ÎÑ§Í∞Ä Ïß† ÏΩîÎìúÏù∏Îç∞ Ïù¥Ìï¥ Î™ª ÌïòÎäî Í±¥ Ï†ïÏÉÅÏûÑ'",
        "üëæ 'Ïù¥Í±∞ Î≤ÑÍ∑∏Ïïº?' 'ÏïÑÎÉê, Í∏∞Îä•Ïù¥Ïïº'",
        "üí° 'Í∞úÎ∞úÏûêÎäî ÏΩîÎìúÎ•º ÏûëÏÑ±ÌïòÎäî Í≤å ÏïÑÎãàÎùº Stack OverflowÏóêÏÑú Ïπ¥Ìîº & ÌéòÏù¥Ïä§Ìä∏ÌïòÎäî ÏßÅÏóÖÏù¥Îã§'",
        "üöÄ 'ÎßàÏßÄÎßâ ÏàòÏ†ïÏù¥ÏóêÏöî!' - Î¨¥Ï°∞Í±¥ Ìïú Î≤à Îçî ÏàòÏ†ïÌïòÍ≤å Îê®",
        "üîÑ 'npm install' ÌñàÎã§Í∞Ä ÌîÑÎ°úÏ†ùÌä∏ ÌÑ∞ÏßÄÎäî Ï§ë‚Ä¶",
        "üîë 'ÎπÑÎ∞ÄÎ≤àÌò∏Îäî 1234Î°ú Ìï¥ÎëêÏûê, ÎÇòÏ§ëÏóê Î∞îÍæ∏Î©¥ Îèº' -> Ï†àÎåÄ Ïïà Î∞îÍøà",
        "üí• 'Ïù¥ ÏΩîÎìú ÏßÄÏõåÎèÑ Îèº?' -> (ÏßÄÏö¥ ÌõÑ) -> 'Ïñ¥‚Ä¶ Îã§Ïãú ÏÇ¥Î†§Ïïº Ìï† Í≤É Í∞ôÏùÄÎç∞?'",
        "üìä 'Ïù¥Í±∞ Ïôú Îπ®Îùº?' -> ÏõêÏù∏ Î™®Î¶Ñ",
        "üìâ 'Ïù¥Í±∞ Ïôú ÎäêÎ†§?' -> ÏõêÏù∏ Î™®Î¶Ñ",
        "üî• 'Ïù¥ ÏΩîÎìú ÏôÑÎ≤ΩÌï¥!' -> Î∞∞Ìè¨ ÌõÑ ÏóêÎü¨ Î°úÍ∑∏ Ìè≠Î∞ú",
        "üë®‚Äçüíª 'Í∞úÎ∞úÏûêÎäî Í∏∞ÌöçÏÑúÎ•º Î≥¥Í≥† Í∞úÎ∞úÌïòÎäî Í≤å ÏïÑÎãàÎùº, Í∏∞ÌöçÏûêÏôÄ Ïã∏Ïö∞Î©¥ÏÑú Í∞úÎ∞úÌïúÎã§'",
        "üßê 'Ïù¥ ÏΩîÎìú ÎàÑÍ∞Ä Ïß∞Ïñ¥?' (Git blame) -> 'ÏïÑ‚Ä¶ ÎÇòÎÑ§'",
        "üîç 'Ïù¥Í≤å Ïôú Ïïà Îèº?' (5ÏãúÍ∞Ñ ÌõÑ) -> 'ÏïÑ, ÏÑ∏ÎØ∏ÏΩúÎ°† ÌïòÎÇò Îπ†Ï°åÎÑ§'",
        "üéÆ 'Í≤åÏûÑ Ìïú ÌåêÎßå ÌïòÍ≥† ÏùºÌï¥ÏïºÏßÄ' -> ÏÉàÎ≤Ω 3Ïãú",
        "üõ†Ô∏è 'Îã§Ïãú Ïã§ÌñâÌï¥Î≥¥ÏÑ∏Ïöî' -> ÎßåÎä• Ìï¥Í≤∞Ï±Ö",
        "üîÑ 'Ïïº, Ïù¥Í±∞ Îã§Ïãú ÏãúÏûëÌï¥Î¥§Ïñ¥?' -> Í∞úÎ∞úÏûê Í∏∞Ïà†ÏßÄÏõê 1Îã®Í≥Ñ",
        "üöÄ 'ÏïÑÎ¨¥ÎèÑ Ïïà Í±¥ÎìúÎ†∏ÎäîÎç∞ Í∞ëÏûêÍ∏∞ Ïïà ÎèºÏöî!' -> ÏûêÎèôÏúºÎ°ú Í≥†Ïû• ÎÇú ÏÑúÎ≤ÑÎäî ÏóÜÎã§"
    ];
    const sidebar = document.querySelector(".sidebar");
    const profileLayout = document.querySelector(".profileLayout");
    const profileInner = document.querySelector(".profileInner");
    const profileImg = document.querySelector(".profileImg");
    const expBar = document.querySelector(".exp");
    const medalBox = document.querySelector(".medalBox");
    const userInfoLayout = document.querySelector(".userInfoLayout");
    const profile = document.querySelector(".profile");
    const achievement_p = document.querySelectorAll(".achievement .content p");
    const content_title = document.querySelectorAll(".achievement .content h2");
    const dropdownItems = document.querySelectorAll(".dropdown-item");
    const selectedTitle = document.getElementById("selectedTitle");

    // Ï¥àÍ∏∞ ÏÉÅÌÉú ÏÑ§Ï†ï
    profileInner.classList.add("profileInvisible");
    expBar.classList.add("profileInvisible");
    medalBox.classList.add("profileInvisible");
    userInfoLayout.classList.remove("profileInvisible");

    // Î∞∞ÎÑà Î¨∏Íµ¨Î•º ÎûúÎç§ÏúºÎ°ú ÌëúÏãúÌïòÎäî Ìï®Ïàò
    function changeBannerText() {
        const randomIndex = Math.floor(Math.random() * messages.length);
        banner.textContent = messages[randomIndex];
    }
    changeBannerText();
    setInterval(changeBannerText, 3000);

    // ÏÇ¨Ïù¥ÎìúÎ∞î Ìò∏Î≤Ñ Ïù¥Î≤§Ìä∏
    sidebar.addEventListener("mouseenter", function () {
        profileInner.classList.remove("profileInvisible");
        expBar.classList.remove("profileInvisible");
        medalBox.classList.remove("profileInvisible");
        medalBox.style.height = "30%";
        userInfoLayout.classList.add("profileInvisible");

        profileLayout.style.marginTop = "0";
        profileLayout.style.marginBottom = "0";
        profileImg.style.width = "140px";
        profileImg.style.height = "140px";
        profile.style.left = "70%";
        userInfoLayout.style.marginTop = "0";

        achievement_p.forEach(p => p.style.opacity = "1");
    });

    sidebar.addEventListener("mouseleave", function () {
        profileInner.classList.add("profileInvisible");
        expBar.classList.add("profileInvisible");
        medalBox.classList.add("profileInvisible");
        medalBox.style.height = "0";
        userInfoLayout.classList.remove("profileInvisible");

        profileImg.style.width = "170px";
        profileImg.style.height = "170px";
        userInfoLayout.style.marginTop = "20%";

        achievement_p.forEach(p => p.style.opacity = "0");
    });

    // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏÉâÏÉÅ Ï†ïÏùò
    const categoryColors = {
        Java: '#ff7a33',
        C: '#0000FF',
        JavaScript: '#ffae00',
        HTML: '#008000',
        Holiday: '#FF0000'
    };

    content_title.forEach(title => {
        title.style.fontSize = "1.6em";
        title.style.marginLeft = "1em";
        title.style.width = "150px";
    });

    // Ï∫òÎ¶∞Îçî Ï¥àÍ∏∞Ìôî
    const calendarEl = document.getElementById('calendar');
    const calendar = new FullCalendar.Calendar(calendarEl, {
        height: '700px',
        locale: 'ko',
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
        },
        initialView: 'dayGridMonth',
        initialDate: '2025-02-26',
        selectable: true,
        dateClick: function(info) {
            window.open('check_event.html?date=' + info.dateStr, 'eventPopup',
                'width=500,height=500,top=100,left=100,scrollbars=no,resizable=no');
        },
        eventClick: function(info) {
            window.open('check_event.html?date=' + info.event.startStr, 'eventPopup',
                'width=500,height=500,top=100,left=100,scrollbars=no,resizable=no');
        },
        events: async function(fetchInfo, successCallback, failureCallback) {
            const localEvents = loadEventsFromLocalStorage();
            const holidayEvents = await fetchHolidays();
            successCallback([...localEvents, ...holidayEvents]);
        },
        eventDidMount: function(info) {
            if (info.event.extendedProps.completed) {
                info.el.querySelector('.fc-event-title').style.textDecoration = 'line-through';
            }
        }
    });
    calendar.render();

    // Í≥µÌú¥Ïùº Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    async function fetchHolidays() {
        const url = 'https://date.nager.at/api/v3/publicholidays/2025/KR';
        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error(`HTTP Ïò§Î•ò: ${response.status}`);
            const holidays = await response.json();
            return holidays.map(holiday => ({
                title: holiday.localName,
                start: holiday.date,
                allDay: true,
                backgroundColor: categoryColors['Holiday'],
                borderColor: categoryColors['Holiday'],
                extendedProps: {
                    memo: holiday.name || '',
                    category: 'Holiday',
                    isHoliday: true,
                    completed: false
                }
            }));
        } catch (error) {
            console.error('Í≥µÌú¥Ïùº Í∞ÄÏ†∏Ïò§Í∏∞ Ïò§Î•ò:', error);
            return [];
        }
    }

    // Ï∫òÎ¶∞ÎçîÏóê Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä
    window.addEventToCalendar = function(date, title, category) {
        const events = JSON.parse(localStorage.getItem('events') || '{}');
        if (!events[date]) events[date] = [];
        events[date].push({ title, category, memo: '', completed: false });
        localStorage.setItem('events', JSON.stringify(events));
        calendar.addEvent({
            title: `${title} (${category})`,
            start: date,
            allDay: true,
            backgroundColor: categoryColors[category],
            borderColor: categoryColors[category],
            extendedProps: { memo: '', completed: false }
        });
        content_title.forEach(title => {
            title.style.fontSize = "2em";
            title.style.marginLeft = "1em";
            title.style.width = "200px";
        });
        console.log(`‚úÖ ÏùºÏ†ï Ï∂îÍ∞Ä ÏôÑÎ£å: ${date}, ${title}, ${category}`);
    };

    // Ïπ≠Ìò∏ ÎìúÎûçÎã§Ïö¥
    dropdownItems.forEach(item => {
        item.addEventListener("click", function () {
            selectedTitle.textContent = this.textContent;
        });
    });

    console.log("addEventListener Ïã§Ìñâ ÏôÑÎ£å");
});

// Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Ïù¥Î≤§Ìä∏ Î∂àÎü¨Ïò§Í∏∞
function loadEventsFromLocalStorage() {
    const events = JSON.parse(localStorage.getItem('events') || '{}');
    const eventList = [];
    const categoryColors = {
        Java: '#ff7a33',
        C: '#0000FF',
        JavaScript: '#ffae00',
        HTML: '#008000',
        Holiday: '#FF0000'
    };
    for (const date in events) {
        events[date].forEach(event => {
            eventList.push({
                title: `${event.title} (${event.category})`,
                start: date,
                allDay: true,
                backgroundColor: categoryColors[event.category],
                borderColor: categoryColors[event.category],
                extendedProps: {
                    memo: event.memo,
                    completed: event.completed || false
                }
            });
        });
    }
    return eventList;
}
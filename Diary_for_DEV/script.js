///todo 1: Ï∫òÎ¶∞Îçî ÏÉùÏÑ± ÏòàÏùÄ O
///todo 2: ÎÇ†ÏßúÎ≥Ñ ÏùºÏ†ï Îì± Îì±Î°ù/ ÏàòÏ†ï/ ÏÇ≠Ï†ú ÏòàÏùÄ
///todo 3: Ïπ¥ÌÖåÍ≥†Î¶¨ ÏòàÏùÄ
///todo 4: ÏùºÏ†ï ÏôÑÎ£åÏãú Í≤ΩÌóòÏπò Î∞òÌôò -> ÎÇòÏ§ëÏóê
///todo 5: Î∞∞ÎÑà ÏàòÏòÅ O
///todo 6: DDL ÏûëÏÑ± ÏàòÏòÅ O

// Î°úÍ∑∏Ïù∏Ï§ëÏù∏ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
let currentUser = {
    name: 'suyeong',
    email: 'suyeong@example.com',
    lv: 2,
    xp: 50,
    img: 'suyeong.png',
    lvUp: function () {
        this.xp -= (this.lv - 1) * 100 + 50;
        this.lv++;
    },
    xpUp: function (xp) {
        this.xp += xp;
        if (this.xp >= this.lv * 100 + 50) {
            this.lvUp();
        }
    }
};

// ÏóÖÏ†Å Î™©Î°ù
// ÏóÖÏ†Å Îã¨ÏÑ± ÌôïÏù∏ Ìï®Ïàò ÌÖåÏä§Ìä∏ ÌõÑ dbÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§ÎèÑÎ°ù Î≥ÄÍ≤Ω ÏòàÏ†ï
const achievements = [
    {
        name: 'JavaScript ÎßàÏä§ÌÑ∞',
        flavor: 'JavaScript 1Í∞ú Îã¨ÏÑ±',
        img: 'js.png',
        isChecked: true
    },
    {
        name: 'Python ÎßàÏä§ÌÑ∞',
        flavor: 'Python 2Í∞ú Îã¨ÏÑ±',
        img: 'python.png',
        isChecked: false
    },
    {
        name: 'HTML/CSS Ïó∞Ïäµ',
        flavor: 'HTML 2Í∞ú Îã¨ÏÑ±',
        img: 'htmlcss.png',
        isChecked: false
    }
];

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî (Í∏∞Ï°¥ ÏΩîÎìú Ïú†ÏßÄ)
let db;
let isDbInitialized = false;

async function initDatabase() {
    const SQL = await initSqlJs({
        locateFile: file => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/${file}`
    });
    db = new SQL.Database();
    db.run(`
        CREATE TABLE user (
            user_id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL COLLATE NOCASE,
            email TEXT UNIQUE NOT NULL,
            password CHAR(60) NOT NULL,
            lv INTEGER NOT NULL DEFAULT 1,
            xp INTEGER NOT NULL DEFAULT 0,
            img TEXT DEFAULT 'default_profile.png'
        );
        CREATE TABLE diary_events (
            event_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            title TEXT NOT NULL DEFAULT '',
            com_lang TEXT NOT NULL,
            xp INTEGER NOT NULL,
            description TEXT DEFAULT '',
            event_date TEXT NOT NULL CHECK (event_date GLOB '????-??-??'),
            FOREIGN KEY (user_id) REFERENCES user(user_id) ON DELETE CASCADE
        );
        CREATE TABLE achievement (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            flavor TEXT NOT NULL CHECK (LENGTH(flavor) <= 255),
            img TEXT
        );
        CREATE TABLE user_achievement (
            user_id INTEGER NOT NULL,
            achievement_id INTEGER NOT NULL,
            PRIMARY KEY (user_id, achievement_id),
            FOREIGN KEY (user_id) REFERENCES user(user_id) ON DELETE CASCADE,
            FOREIGN KEY (achievement_id) REFERENCES achievement(id) ON DELETE CASCADE
        );
    `);
    console.log("Database initialized successfully.");
    isDbInitialized = true;
    insertDummyData();
}
initDatabase().catch(error => console.error("Database Initialization Error:", error));

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû•
// function loadDatabase() {
//     const data = localStorage.getItem('database');
//     if (data) {
//         db = new SQL.Database(new Uint8Array(data));
//         console.log("‚úÖ Ï†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î°úÎìú ÏÑ±Í≥µ!");
//     } else {
//         db = new SQL.Database();
//         console.log("üîπ ÏÉàÎ°úÏö¥ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉùÏÑ±!");
//         // ÌÖåÏù¥Î∏î ÏÉùÏÑ±
//         db.run(`
//             CREATE TABLE IF NOT EXISTS user (
//                 user_id  INTEGER PRIMARY KEY AUTOINCREMENT,
//                 username TEXT UNIQUE NOT NULL COLLATE NOCASE,
//                 email    TEXT UNIQUE NOT NULL,
//                 password CHAR(60) NOT NULL,
//                 lv       INTEGER NOT NULL DEFAULT 1,
//                 xp       INTEGER NOT NULL DEFAULT 0,
//                 img      TEXT DEFAULT 'default_profile.png'
//             );
//         `);
//         db.run(`
//             CREATE TABLE IF NOT EXISTS diary_events (
//                 event_id    INTEGER PRIMARY KEY AUTOINCREMENT,
//                 user_id     INTEGER NOT NULL,
//                 title       TEXT NOT NULL DEFAULT '',
//                 com_lang    TEXT NOT NULL,
//                 xp          INTEGER NOT NULL,
//                 description TEXT DEFAULT '',
//                 event_date  TEXT NOT NULL CHECK (event_date GLOB '????-??-??'),
//                 FOREIGN KEY (user_id) REFERENCES user (user_id) ON DELETE CASCADE
//             );
//         `);
//         db.run(`
//             CREATE TABLE IF NOT EXISTS achievement (
//                 id         INTEGER PRIMARY KEY AUTOINCREMENT,
//                 name      TEXT NOT NULL,
//                 flavor    TEXT NOT NULL CHECK (LENGTH(flavor) <= 255),
//                 img      TEXT
//             );
//         `);
//         db.run(`
//             CREATE TABLE IF NOT EXISTS user_achievement (
//                 user_id    INTEGER NOT NULL,
//                 achievement_id INTEGER NOT NULL,
//                 FOREIGN KEY (user_id) REFERENCES user (user_id) ON DELETE CASCADE,
//                 FOREIGN KEY (achievement_id) REFERENCES achievement (id) ON DELETE CASCADE,
//                 PRIMARY KEY (user_id, achievement_id)
//             );
//         `);
//         insertDummyData(); // ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
//     }
//     isDbInitialized = true;
// }

// ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
function insertDummyData() {
    // Î°úÍ∑∏Ïù∏ ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ (user ÌÖåÏù¥Î∏î)
    db.run(`
        INSERT INTO user (username, email, password, lv, xp, img) VALUES
            ('suyeong', 'suyeong@example.com', 'pass123', 2, 50, 'suyeong.png'),
            ('minji', 'minji@example.com', 'secure456', 3, 100, 'minji.png'),
            ('1', '1@1.1', '1', 1, 0, '.png'),
            ('joon', 'joon@example.com', 'test789', 1, 10, 'default_profile.png');
    `);

    // Í∏∞ÌÉÄ ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ (diary_events ÌÖåÏù¥Î∏î)
    db.run(`
        INSERT INTO diary_events (user_id, title, com_lang, xp, description, event_date) VALUES
            (1, 'JavaScript Î∞∞Ïö∞Í∏∞', 'JavaScript', 30, 'Í∏∞Î≥∏ Î¨∏Î≤ï Í≥µÎ∂Ä ÏôÑÎ£å', '2025-03-01'),
            (2, 'Python ÌîÑÎ°úÏ†ùÌä∏', 'Python', 50, 'Í∞ÑÎã®Ìïú Ïõπ Ïï± Ï†úÏûë', '2025-03-02'),
            (3, 'HTML/CSS Ïó∞Ïäµ', 'HTML', 20, 'Î∞òÏùëÌòï ÎîîÏûêÏù∏ Ïó∞Ïäµ', '2025-03-03'),
            (1, 'Python ÌîÑÎ°úÏ†ùÌä∏', 'Python', 50, 'Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù ÌîÑÎ°úÏ†ùÌä∏', '2025-03-04'),
            (1, 'HTML/CSS Ïó∞Ïäµ', 'HTML', 20, 'Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ï†úÏûë', '2025-03-05');
    `);
    db.run(`
        INSERT INTO achievement (name, flavor, img) VALUES
            ('JavaScript ÎßàÏä§ÌÑ∞', '{"category":"JavaScript","count":"1"}', 'js.png'),
            ('Python ÎßàÏä§ÌÑ∞', '{"category":"Python","count":"2"}', 'python.png'),
            ('HTML/CSS Ïó∞Ïäµ', '{"category":"HTML","count":"2"}', 'htmlcss.png');
    `);
    console.log("‚úÖ ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ ÏôÑÎ£å!");
}

// Î∞∞ÎÑà Î¨∏Íµ¨ Î≥ÄÍ≤Ω Î∞è Ï∫òÎ¶∞Îçî ÏÑ§Ï†ï
document.addEventListener("DOMContentLoaded", function () {
    const banner = document.querySelector(".banner");
    const messages = [
        "üöÄ Í∞úÎ∞úÏùÄ Ï∞ΩÏ°∞Îã§!",
        "üî• Î≤ÑÍ∑∏Î•º Ïû°Ïûê!",
        "üí° Ïò§ÎäòÎèÑ ÏÑ±Ïû• Ï§ë!",
        "üî® ÏΩîÎìú Ìïú Ï§Ñ, ÎØ∏Îûò Ìïú Í±∏Ïùå!",
        "üåç Hello, World!",
        "üåê HTML ÏùÄ ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç Ïñ∏Ïñ¥Í∞Ä ÏïÑÎãàÎã§!",
        "üè∑Ô∏è ÌÉúÍ∑∏Îäî Ï§ëÏöîÌï¥!"
    ];
    let currentIndex = 0;
    function changeBannerText() {
        banner.textContent = messages[currentIndex];
        currentIndex = (currentIndex + 1) % messages.length;
    }
    setInterval(changeBannerText, 3000);

    // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏÉâÏÉÅ Îß§Ìïë
    const categoryColors = {
        Java: '#FFA500',       // Ï£ºÌô©ÏÉâ
        C: '#0000FF',          // ÌååÎûÄÏÉâ
        JavaScript: '#FFFF00', // ÎÖ∏ÎûÄÏÉâ
        HTML: '#008000'        // Ï¥àÎ°ùÏÉâ
    };

    // Ï∫òÎ¶∞Îçî ÏÑ§Ï†ï
    var calendarEl = document.getElementById('calendar');
    var calendar = new FullCalendar.Calendar(calendarEl, {
        height: '700px',
        locale: 'ko', // ÌïúÍµ≠Ïñ¥ ÏÑ§Ï†ï
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
        },
        initialView: 'dayGridMonth',
        initialDate: '2025-02-26',
        selectable: true,
        dateClick: function(info) {
            openModal(info.dateStr, null);
        },
        eventClick: function(info) {
            openModal(info.event.startStr, info.event);
        },
        events: loadEventsFromLocalStorage()
    });
    calendar.render();

    // Î™®Îã¨ Ï∞Ω Ïó¥Í∏∞ Ìï®Ïàò
    let selectedEvent = null;
    function openModal(date, event) {
        const modal = document.getElementById('eventModal');
        const titleInput = document.getElementById('eventTitle');
        const categorySelect = document.getElementById('eventCategory');
        const memoInput = document.getElementById('eventMemo');
        const deleteBtn = document.getElementById('deleteEvent');
        window.selectedDate = date;

        if (event) {
            // ÏàòÏ†ï Î™®Îìú
            selectedEvent = event;
            titleInput.value = event.title.split(' (')[0];
            categorySelect.value = event.title.match(/\(([^)]+)\)/)[1];
            memoInput.value = event.extendedProps.memo || '';
            deleteBtn.style.display = 'inline';
        } else {
            // ÏÉùÏÑ± Î™®Îìú
            selectedEvent = null;
            titleInput.value = '';
            categorySelect.value = 'Java';
            memoInput.value = '';
            deleteBtn.style.display = 'none';
        }
        modal.style.display = 'block';
    }

    // Î™®Îã¨ Ï∞Ω Îã´Í∏∞
    document.querySelector('.close').onclick = function() {
        document.getElementById('eventModal').style.display = 'none';
    };

    // ÏùºÏ†ï Ï†ÄÏû• (Îπà Ï†úÎ™© Í≤ΩÍ≥† Î¨∏Ï†ú Ìï¥Í≤∞)
    document.getElementById('eventForm').onsubmit = function(e) {
        e.preventDefault();
        const title = document.getElementById('eventTitle').value.trim();
        const category = document.getElementById('eventCategory').value;
        const memo = document.getElementById('eventMemo').value.trim();
        const date = window.selectedDate;

        // Îπà Ï†úÎ™© Ï≤¥ÌÅ¨Î•º ÏµúÏÉÅÎã®ÏóêÏÑú Ï≤òÎ¶¨
        if (!title) {
            alert('ÏùºÏ†ïÏùÑ ÏûÖÎ†•ÌïòÏãúÏò§');
            return; // Îπà Ï†úÎ™©Ïù¥Î©¥ Ïó¨Í∏∞ÏÑú Ìï®Ïàò Ï¢ÖÎ£å
        }

        const events = JSON.parse(localStorage.getItem('events')) || {};

        if (selectedEvent) {
            // ÏàòÏ†ï
            selectedEvent.remove();
            if (!events[date]) events[date] = [];
            events[date] = events[date].filter(ev => ev.title !== selectedEvent.title.split(' (')[0]);
            alert('ÏùºÏ†ïÏù¥ ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.');
        } else {
            alert('ÏùºÏ†ïÏù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!');
        }

        // Ïù¥Î≤§Ìä∏ Ï†ÄÏû• (Ï§ëÎ≥µ Ï†úÍ±∞)
        if (!events[date]) events[date] = [];
        events[date].push({ title, category, memo });
        localStorage.setItem('events', JSON.stringify(events));
        calendar.addEvent({
            title: `${title} (${category})`,
            start: date,
            allDay: true,
            backgroundColor: categoryColors[category],
            borderColor: categoryColors[category],
            extendedProps: { memo }
        });

        document.getElementById('eventModal').style.display = 'none';
        document.getElementById('eventForm').reset();
    };

    // ÏùºÏ†ï ÏÇ≠Ï†ú
    document.getElementById('deleteEvent').onclick = function() {
        if (selectedEvent && confirm('ÏùºÏ†ïÏùÑ Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
            const date = window.selectedDate;
            const events = JSON.parse(localStorage.getItem('events')) || {};
            events[date] = events[date].filter(ev => ev.title !== selectedEvent.title.split(' (')[0]);
            if (events[date].length === 0) delete events[date];
            localStorage.setItem('events', JSON.stringify(events));
            selectedEvent.remove();
            document.getElementById('eventModal').style.display = 'none';
            alert('ÏùºÏ†ïÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
        }
    };
});

// Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú ÏùºÏ†ï Î∂àÎü¨Ïò§Í∏∞
function loadEventsFromLocalStorage() {
    const events = JSON.parse(localStorage.getItem('events')) || {};
    const eventList = [];
    const categoryColors = {
        Java: '#FFA500',       // Ï£ºÌô©ÏÉâ
        C: '#0000FF',          // ÌååÎûÄÏÉâ
        JavaScript: '#FFFF00', // ÎÖ∏ÎûÄÏÉâ
        HTML: '#008000'        // Ï¥àÎ°ùÏÉâ
    };
    for (const date in events) {
        events[date].forEach(event => {
            eventList.push({
                title: `${event.title} (${event.category})`,
                start: date,
                allDay: true,
                backgroundColor: categoryColors[event.category],
                borderColor: categoryColors[event.category],
                extendedProps: { memo: event.memo }
            });
        });
    }
    return eventList;
}

// Î°úÍ∑∏Ïù∏ Î∞è ÌöåÏõêÍ∞ÄÏûÖ Í¥ÄÎ†®
function validateEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}

function signup() {
    if (!isDbInitialized) {
        alert("üö® Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Í∞Ä ÏïÑÏßÅ Ï¥àÍ∏∞Ìôî Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌïòÏÑ∏Ïöî.");
        return;
    }
    let username = document.getElementById('signup-username')?.value;
    let email = document.getElementById('signup-email')?.value;
    let password = document.getElementById('signup-password')?.value;
    let confirmPassword = document.getElementById('signup-password-confirm')?.value;

    if (!username || !email || !password || !confirmPassword) {
        alert('üì¢ ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ, Ïù¥Î©îÏùº, ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Î™®Îëê ÏûÖÎ†•ÌïòÏÑ∏Ïöî.');
        return;
    }

    if (!validateEmail(email)) {
        alert('üì¢ Ïò¨Î∞îÎ•∏ Ïù¥Î©îÏùº ÌòïÏãùÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.');
        return;
    }

    if (password !== confirmPassword) {
        alert('üì¢ ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.');
        return;
    }

    let checkStmt = db.prepare("SELECT * FROM user WHERE email = ? OR username = ?");
    checkStmt.bind([email, username]);
    if (checkStmt.step()) {
        alert('‚ùå Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî Ïù¥Î©îÏùº ÎòêÎäî ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏûÖÎãàÎã§.');
        checkStmt.free();
        return;
    }
    checkStmt.free();

    console.log("üîç ÏÇΩÏûÖÌï† Îç∞Ïù¥ÌÑ∞:", { username, email, password });
    db.run("INSERT INTO user (username, email, password) VALUES (?, ?, ?)", [username, email, password]);
    alert('‚úÖ ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ! Î°úÍ∑∏Ïù∏ Ìï¥Ï£ºÏÑ∏Ïöî.');
    showLogin();
    showUsers();
}

function login() {
    if (!isDbInitialized) {
        alert("üö® Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Í∞Ä ÏïÑÏßÅ Ï¥àÍ∏∞Ìôî Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌïòÏÑ∏Ïöî.");
        return;
    }
    let email = document.getElementById('login-email')?.value;
    let password = document.getElementById('login-password')?.value;

    if (!email || !password) {
        alert('üì¢ Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.');
        return;
    }

    let stmt = db.prepare("SELECT * FROM user WHERE email = ? AND password = ?");
    stmt.bind([email, password]);
    if (stmt.step()) {
        let user = stmt.getAsObject(); // Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï†ÑÎã¨
        currentUser.name = user.username;
        currentUser.email = user.email;
        currentUser.lv = user.lv;
        currentUser.xp = user.xp;
        currentUser.img = user.img;

        alert('‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ!');
        window.location.href = 'index.html';
    } else {
        alert('‚ùå Ïù¥Î©îÏùº ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§.');
    }
    stmt.free();
}

function showLogin() {
    document.getElementById('signup-container').style.display = 'none';
    document.getElementById('login-container').style.display = 'block';
}

function showSignup() {
    document.getElementById('login-container').style.display = 'none';
    document.getElementById('signup-container').style.display = 'block';
}

function toggleButtons(disabled) {
    const signupButton = document.getElementById("signup-button");
    const loginButton = document.getElementById("login-button");
    if (signupButton) signupButton.disabled = disabled;
    if (loginButton) loginButton.disabled = disabled;
}

function showUsers() {
    if (!isDbInitialized) {
        console.log("üö® Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
        return;
    }
    // üö® `user` ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
    let checkTable = db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='user';");
    if (!checkTable.step()) {
        console.warn("‚ö†Ô∏è `user` ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå! ÏÉàÎ°ú ÏÉùÏÑ±Ìï©ÎãàÎã§.");
        db.run(`
            CREATE TABLE IF NOT EXISTS user (
                user_id  INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL COLLATE NOCASE,
                email    TEXT UNIQUE NOT NULL,
                password CHAR(60) NOT NULL,
                lv       INTEGER NOT NULL DEFAULT 1,
                xp       INTEGER NOT NULL DEFAULT 0,
                img      TEXT DEFAULT 'default_profile.png'
            );
        `);
        console.log("‚úÖ `user` ÌÖåÏù¥Î∏îÏùÑ Îã§Ïãú ÏÉùÏÑ±ÌñàÏäµÎãàÎã§.");
    } else {
        console.log("‚úÖ `user` ÌÖåÏù¥Î∏î ÌôïÏù∏ ÏôÑÎ£å.");
    }
    checkTable.free();

    console.log("üîç Ï†ÄÏû•Îêú ÏÇ¨Ïö©Ïûê Î™©Î°ù:");
    let stmt = db.prepare("SELECT user_id, username, email, password, lv, xp, img FROM user");
    while (stmt.step()) {
        let row = stmt.getAsObject();
        console.log(row);
    }
    stmt.free();

    let userList = document.getElementById('user-list');
    if (userList) {
        userList.innerHTML = '<h3>Ï†ÄÏû•Îêú ÏÇ¨Ïö©Ïûê</h3><ul>';
        stmt = db.prepare("SELECT user_id, username, email FROM user");
        while (stmt.step()) {
            let row = stmt.getAsObject();
            userList.innerHTML += `<li>ID: ${row.user_id}, ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ: ${row.username}, Ïù¥Î©îÏùº: ${row.email}</li>`;
        }
        stmt.free();
        userList.innerHTML += '</ul>';
    }
}

document.addEventListener("DOMContentLoaded", async function () {
    console.log("üîπ DOM Î°úÎìú ÏôÑÎ£å. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî ÏãúÏûë...");
    toggleButtons(true);

    const statusElement = document.createElement('div');
    statusElement.id = 'init-status';
    statusElement.textContent = 'üîÑ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî Ï§ë...';
    statusElement.style.position = 'fixed';
    statusElement.style.top = '10px';
    statusElement.style.left = '50%';
    statusElement.style.transform = 'translateX(-50%)';
    document.body.appendChild(statusElement);

    await initDatabase();

    if (isDbInitialized) {
        toggleButtons(false);
        statusElement.textContent = '‚úÖ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å!';
        console.log("‚úÖ Î™®Îì† Ï¥àÍ∏∞Ìôî ÏôÑÎ£å!");
        showUsers();
        setTimeout(() => statusElement.remove(), 2000);
    } else {
        console.error("‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî Ïã§Ìå®Î°ú Ï∂îÍ∞Ä ÏûëÏóÖ Ï§ëÎã®");
        statusElement.textContent = '‚ùå Ï¥àÍ∏∞Ìôî Ïã§Ìå®. ÏÉàÎ°úÍ≥†Ïπ®ÏùÑ ÏãúÎèÑÌïòÏÑ∏Ïöî.';
        toggleButtons(true);
    }
});
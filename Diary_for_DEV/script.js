let db;

const banner = document.querySelector(".banner");
const messages = [
    "üöÄ ÏΩîÎìú Ìïú Ï§ÑÏù¥ ÏÑ∏ÏÉÅÏùÑ Î∞îÍæºÎã§!",
    "üêû Î≤ÑÍ∑∏ ÏóÜÎäî ÏΩîÎìú? Ïã†ÌôîÏùº Îøê!",
    "üí° Ï£ºÏÑùÏù¥ ÏóÜÎäî ÏΩîÎìúÎäî ÎßàÎ≤ïÏù¥Îã§. Ïù¥Ìï¥Ìï† Ïàò ÏóÜÏúºÎãàÍπå!",
    "üî® 'ÏûëÎèôÌïòÎ©¥ Í±¥Îì§ÏßÄ ÎßàÎùº' - Í∞úÎ∞úÏûêÏùò Ï≤†Ìïô",
    "‚ö° console.log('ÎîîÎ≤ÑÍπÖ Ï§ë...')",
    "üåé JavaÎäî Ïª§Ìîº, JavaScriptÎäî Ïä§ÌÅ¨Î¶ΩÌä∏!",
    "‚è≥ 99% ÏôÑÎ£å? ÎÇ®ÏùÄ 1%Í∞Ä 99%Ïùò ÏãúÍ∞Ñ!",
    "üî• GitÏùÄ Í∏∞ÏñµÌïòÏßÄ ÏïäÎäîÎã§. ÌïòÏßÄÎßå Î°úÍ∑∏Îäî Í∏∞ÏñµÌïúÎã§.",
    "üöß ÎÇ¥ ÏΩîÎìúÎäî Ïûò ÎèåÏïÑÍ∞Ä, ÌïòÏßÄÎßå Ïù¥Ïú†Îäî Î™∞Îùº!",
    "üìå Stack OverflowÍ∞Ä ÏóÜÏúºÎ©¥ Í∞úÎ∞úÏù¥ Ïïà Îèº!",
    "üéØ 'Ïù¥Í±¥ ÏûÑÏãú ÏΩîÎìúÏïº' - 10ÎÖÑ ÏßÄÎÇú ÏΩîÎìú",
    "üñ•Ô∏è 'Ïù¥ÏÉÅÌïòÎÑ§, ÎÇ¥ Ïª¥Ìì®ÌÑ∞ÏóêÏÑúÎäî ÎêòÎäîÎç∞?'",
    "üíæ 'Ctrl + S'Îäî ÎÇ¥ ÏÉùÎ™ÖÏ§Ñ",
    "üìú TODO: ÎÇòÏ§ëÏóê Î¶¨Ìå©ÌÜ†ÎßÅÌïòÍ∏∞ (Ï†àÎåÄ Ïïà Ìï®)",
    "üé≠ CSSÎäî ÎßàÎ≤ïÏù¥Îã§. ÏòàÏÉÅÎåÄÎ°ú ÎèôÏûëÌï† ÎïåÍ∞Ä ÏóÜÎã§„ÄÇ",
    "üåê HTMLÏùÄ ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç Ïñ∏Ïñ¥Í∞Ä ÏïÑÎãàÎã§! ÌïòÏßÄÎßå ÏóÜÏúºÎ©¥ ÏõπÎèÑ ÏóÜÎã§!",
    "üíÄ 'undefined'Îäî Í∞úÎ∞úÏûêÏùò ÏµúÏïÖÏùò ÏïÖÎ™Ω",
    "üìå nullÍ≥º undefinedÏùò Ï∞®Ïù¥Î•º ÏïàÎã§Î©¥ Ïù¥ÎØ∏ Í≥†ÏàòÎã§.",
    "üîÅ while(true) { work(); sleep(0); } // Í∞úÎ∞úÏûêÏùò ÌòÑÏã§",
    "üîß 'Ïù¥Í±¥ Ïâ¨Ïö¥ ÏàòÏ†ïÏù¥Ïïº'ÎùºÍ≥† ÎßêÌïòÎ©¥ Ïïà Îèº...",
    "ü§Ø Í∞úÎ∞úÏûêÎäî ÏΩîÎìúÎ•º ÏßúÎäî Í≤å ÏïÑÎãàÎùº Î≤ÑÍ∑∏Î•º Í≥†ÏπòÎäî ÏßÅÏóÖÏù¥Îã§„ÄÇ",
    "üöÄ Ïª¥ÌååÏùºÏùÄ ÏÑ±Í≥µÌñàÏßÄÎßå Ïã§ÌñâÏùÄ Ïïà ÎêúÎã§? Ï∂ïÌïòÌï©ÎãàÎã§, ÏßÑÏ†ïÌïú Í∞úÎ∞úÏûêÏûÖÎãàÎã§!",
    "ü§ñ AIÍ∞Ä ÏΩîÎìúÎ•º ÏßúÎäî ÎÇ†Ïù¥ ÏôÄÎèÑ, Î≤ÑÍ∑∏Îäî Ïö∞Î¶¨Í∞Ä Í≥†Ï≥êÏïº ÌïúÎã§!",
    "üí° 'ÏùºÎã® ÏûëÎèôÌïòÍ≤å ÎßåÎì§Í≥†, ÎÇòÏ§ëÏóê ÍπîÎÅîÌïòÍ≤å Ï†ïÎ¶¨ÌïòÏûê' - ÏòÅÏõêÌûà Ï†ïÎ¶¨ÎêòÏßÄ ÏïäÏùå",
    "üî• 'Ïù¥Í±∞ Ïôú Ïïà Îèº?' Î≥¥Îã§ Îçî Î¨¥ÏÑúÏö¥ Îßê: 'Ïù¥Í±∞ Ïôú Îèº?'",
    "üïµÔ∏è 'ÎÑ§Ìä∏ÏõåÌÅ¨ Î¨∏Ï†úÏùº ÏàòÎèÑ ÏûàÏñ¥' - Î™®Îì† Î¨∏Ï†úÏùò ÎßåÎä• Î≥ÄÎ™Ö",
    "üêõ 'Ïù¥Í±∞ Î∂ÑÎ™ÖÌûà Ïñ¥Ï†úÎäî Ïûò ÎêêÎäîÎç∞‚Ä¶'",
    "üîÑ 'ÏÉàÎ≤Ω 2ÏãúÏóê Í∏âÌïòÍ≤å ÏàòÏ†ïÌïú ÏΩîÎìúÍ∞Ä Ï†úÏùº Ïò§Îûò ÏÇ¥ÏïÑÎÇ®ÎäîÎã§'",
    "üõ†Ô∏è 'Ìïú Ï§ÑÎßå Î∞îÍø®ÎäîÎç∞, Îã§ ÎßùÍ∞ÄÏ°åÎã§'",
    "üé≠ 'Î¶¨Ìå©ÌÜ†ÎßÅ'Ïù¥ÎûÄ ÏΩîÎìúÎ•º Í≥†ÏπòÎäî Í≤å ÏïÑÎãàÎùº Îã§Ïãú ÏßúÎäî Í≤É",
    "üöÄ 'Ïù¥Í±∞ ÌîÑÎ°úÎçïÏÖòÏóê Ïò¨Î†§ÎèÑ Í¥úÏ∞ÆÍ≤†ÏßÄ?' - Í∞ÄÏû• ÏúÑÌóòÌïú Îßê",
    "üíæ 'Ïö∞Î¶¨ ÏÑúÎπÑÏä§Îäî ÏïàÏ†ÑÌï¥! Îß§Ïùº AWSÏóê 5Îã¨Îü¨Î•º Ïì∞Í≥† ÏûàÍ±∞Îì†!'",
    "ü§Ø 'Ïù¥ ÏΩîÎìúÎ•º ÏûëÏÑ±Ìïú ÏÇ¨Îûå ÎàÑÍµ¨Ïïº?' (Git blame ÌñàÎçîÎãà ÎÇòÏò¥)",
    "üï∂Ô∏è 'Ïù¥Í±∞ ÎåÄÏ∂© ÏßúÍ≥† ÎÇòÏ§ëÏóê Í≥†ÏπòÏûê' = Ï†àÎåÄ Í≥†ÏπòÏßÄ ÏïäÏùå",
    "üíÄ 'ÏÑ§Îßà Ïù¥Í±∞ Ìïú Ï§Ñ Î∞îÍæºÎã§Í≥† ÌÑ∞ÏßÄÍ≤†Ïñ¥?' -> ÌÑ∞Ïßê",
    "üïπÔ∏è 'Ïïº, Ïù¥Í±∞ Ïôú Ïïà Îèº?' 'Ï∫êÏãú ÏßÄÏõ†Ïñ¥?' 'Ïñ¥‚Ä¶'",
    "üß© 'Î∞∞Ìè¨ Ï†ÑÏóê ÌÖåÏä§Ìä∏ Ìï¥Î¥§Ïñ¥?' 'ÏïÑÎãà, Í∑ºÎç∞ ÎÇ¥ Î°úÏª¨ÏóêÏÑúÎäî Ïûò ÎêêÏñ¥!'",
    "üîé 'ÎÑ§Í∞Ä Ïß† ÏΩîÎìúÏù∏Îç∞ Ïù¥Ìï¥ Î™ª ÌïòÎäî Í±¥ Ï†ïÏÉÅÏûÑ'",
    "üëæ 'Ïù¥Í±∞ Î≤ÑÍ∑∏Ïïº?' 'ÏïÑÎÉê, Í∏∞Îä•Ïù¥Ïïº'",
    "üí° 'Í∞úÎ∞úÏûêÎäî ÏΩîÎìúÎ•º ÏûëÏÑ±ÌïòÎäî Í≤å ÏïÑÎãàÎùº Stack OverflowÏóêÏÑú Ïπ¥Ìîº & ÌéòÏù¥Ïä§Ìä∏ÌïòÎäî ÏßÅÏóÖÏù¥Îã§'",
    "üöÄ 'ÎßàÏßÄÎßâ ÏàòÏ†ïÏù¥ÏóêÏöî!' - Î¨¥Ï°∞Í±¥ Ìïú Î≤à Îçî ÏàòÏ†ïÌïòÍ≤å Îê®",
    "üîÑ 'npm install' ÌñàÎã§Í∞Ä ÌîÑÎ°úÏ†ùÌä∏ ÌÑ∞ÏßÄÎäî Ï§ë‚Ä¶",
    "üîë 'ÎπÑÎ∞ÄÎ≤àÌò∏Îäî 1234Î°ú Ìï¥ÎëêÏûê, ÎÇòÏ§ëÏóê Î∞îÍæ∏Î©¥ Îèº' -> Ï†àÎåÄ Ïïà Î∞îÍøà",
    "üí• 'Ïù¥ ÏΩîÎìú ÏßÄÏõåÎèÑ Îèº?' -> (ÏßÄÏö¥ ÌõÑ) -> 'Ïñ¥‚Ä¶ Îã§Ïãú ÏÇ¥Î†§Ïïº Ìï† Í≤É Í∞ôÏùÄÎç∞?'",
    "üìä 'Ïù¥Í±∞ Ïôú Îπ®Îùº?' -> ÏõêÏù∏ Î™®Î¶Ñ",
    "üìâ 'Ïù¥Í±∞ Ïôú ÎäêÎ†§?' -> ÏõêÏù∏ Î™®Î¶Ñ",
    "üî• 'Ïù¥ ÏΩîÎìú ÏôÑÎ≤ΩÌï¥!' -> Î∞∞Ìè¨ ÌõÑ ÏóêÎü¨ Î°úÍ∑∏ Ìè≠Î∞ú",
    "üë®‚Äçüíª 'Í∞úÎ∞úÏûêÎäî Í∏∞ÌöçÏÑúÎ•º Î≥¥Í≥† Í∞úÎ∞úÌïòÎäî Í≤å ÏïÑÎãàÎùº, Í∏∞ÌöçÏûêÏôÄ Ïã∏Ïö∞Î©¥ÏÑú Í∞úÎ∞úÌïúÎã§'",
    "üßê 'Ïù¥ ÏΩîÎìú ÎàÑÍ∞Ä Ïß∞Ïñ¥?' (Git blame) -> 'ÏïÑ‚Ä¶ ÎÇòÎÑ§'",
    "üîç 'Ïù¥Í≤å Ïôú Ïïà Îèº?' (5ÏãúÍ∞Ñ ÌõÑ) -> 'ÏïÑ, ÏÑ∏ÎØ∏ÏΩúÎ°† ÌïòÎÇò Îπ†Ï°åÎÑ§'",
    "üéÆ 'Í≤åÏûÑ Ìïú ÌåêÎßå ÌïòÍ≥† ÏùºÌï¥ÏïºÏßÄ' -> ÏÉàÎ≤Ω 3Ïãú",
    "üõ†Ô∏è 'Îã§Ïãú Ïã§ÌñâÌï¥Î≥¥ÏÑ∏Ïöî' -> ÎßåÎä• Ìï¥Í≤∞Ï±Ö",
    "üîÑ 'Ïïº, Ïù¥Í±∞ Îã§Ïãú ÏãúÏûëÌï¥Î¥§Ïñ¥?' -> Í∞úÎ∞úÏûê Í∏∞Ïà†ÏßÄÏõê 1Îã®Í≥Ñ",
    "üöÄ 'ÏïÑÎ¨¥ÎèÑ Ïïà Í±¥ÎìúÎ†∏ÎäîÎç∞ Í∞ëÏûêÍ∏∞ Ïïà ÎèºÏöî!' -> ÏûêÎèôÏúºÎ°ú Í≥†Ïû• ÎÇú ÏÑúÎ≤ÑÎäî ÏóÜÎã§"
];
const sidebar = document.querySelector(".sidebar");
const profileLayout = document.querySelector(".profileLayout");
const profileInner = document.querySelector(".profileInner");
const profileImg = document.querySelector(".profileImg");
const expBarContainer = document.querySelector(".exp-bar-container");
const expBar = document.querySelector(".exp-bar");
const exp = document.querySelector(".exp");
const medalBox = document.querySelector(".medalBox");
const userInfoLayout = document.querySelector(".userInfoLayout");
const profile = document.querySelector(".profile");
const achievement_p = document.querySelectorAll(".achievement .content p");
const content_title = document.querySelectorAll(".achievement .content h2");
const dropdownItems = document.querySelectorAll(".dropdown-item");
const selectedTitle = document.getElementById("selectedTitle");
const levelDisplay = document.querySelector(".level-display");
const dropdownMenu = document.querySelector(".dropdown-menu");

let calendarInstance = null;

const currentUser = {
    user_id: null,
    username: null,
    email: null,
    password: null,
    lv: 1,
    xp: 0,
    img: 'default_profile.png',
    xpUp: function (xp) {
        this.xp += xp;
        console.log(`‚úÖ Í≤ΩÌóòÏπò ${xp} ÌöçÎìù! (ÌòÑÏû¨ Î†àÎ≤®: ${this.lv}, ÌòÑÏû¨ Í≤ΩÌóòÏπò: ${this.xp}`);
        const requiredXp = this.lv + 1;
        if (this.xp >= requiredXp) {
            this.xp = 0;
            this.lv++;
            console.log(`‚ú® Î†àÎ≤® ÏóÖ! (ÌòÑÏû¨ Î†àÎ≤®: ${this.lv}, ÌòÑÏû¨ Í≤ΩÌóòÏπò: ${this.xp}`);
        }
        try {
            db.exec("UPDATE user SET xp=?, lv=? WHERE user_id=?", [this.xp, this.lv, this.user_id]);
            saveUserToLocalStorage();
            updateLevelAndExp();
            console.log("‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Í≤ΩÌóòÏπò Î∞è Î†àÎ≤® ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å!");
        } catch (error) {
            console.error('XP ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
        }
    }
};

async function initDatabase() {
    try {
        const SQL = await initSqlJs({
            locateFile: file => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/${file}`
        });
        db = new SQL.Database();
        db.run(`
            CREATE TABLE IF NOT EXISTS user ( -- ÏÇ¨Ïö©Ïûê ÌÖåÏù¥Î∏î
                                                user_id     INTEGER PRIMARY KEY AUTOINCREMENT,      -- ÏÇ¨Ïö©Ïûê ID
                                                username    TEXT UNIQUE NOT NULL COLLATE NOCASE,    -- ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ
                                                email       TEXT UNIQUE NOT NULL,                   -- Ïù¥Î©îÏùº
                                                password    TEXT NOT NULL,                          -- ÎπÑÎ∞ÄÎ≤àÌò∏
                                                lv          INTEGER DEFAULT 1,                      -- Î†àÎ≤®
                                                xp          INTEGER DEFAULT 0,                      -- Í≤ΩÌóòÏπò
                                                img         TEXT DEFAULT 'default_profile.png',     -- ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ
                                                highscore   INTEGER DEFAULT 0                       -- Í≤åÏûÑ ÏµúÍ≥†Í∏∞Î°ù
            );
        `);
        db.run(`
            CREATE TABLE IF NOT EXISTS diary_event ( -- ÏùºÏ†ï ÌÖåÏù¥Î∏î
                                                       event_id    INTEGER PRIMARY KEY AUTOINCREMENT,  -- Ïù¥Î≤§Ìä∏ ID
                                                       user_id     INTEGER NOT NULL,                   -- ÏÇ¨Ïö©Ïûê ID
                                                       title       TEXT NOT NULL,                      -- Ï†úÎ™©
                                                       category    TEXT NOT NULL,                      -- Î∂ÑÎ•ò
                                                       memo        TEXT,                               -- Î©îÎ™®
                                                       date        TEXT NOT NULL,                      -- ÎÇ†Ïßú
                                                       completed   BOOLEAN DEFAULT FALSE,              -- ÏôÑÎ£å Ïó¨Î∂Ä

                                                       FOREIGN KEY (user_id) REFERENCES user(user_id)
                );
        `);
        db.run(`
            CREATE TABLE IF NOT EXISTS achievement ( -- Ïπ≠Ìò∏ ÌÖåÏù¥Î∏î
                                                       ach_id  INTEGER PRIMARY KEY AUTOINCREMENT,-- Ïπ≠Ìò∏ ID
                                                       title   TEXT NOT NULL,  -- Ïπ≠Ìò∏Î™Ö
                                                       flavor  TEXT NOT NULL,  -- Ïπ≠Ìò∏ ÏÑ§Î™Ö
                                                       trigger TEXT NOT NULL,  -- Ïπ≠Ìò∏ ÌöçÎìù Ï°∞Í±¥
                                                       img     TEXT NOT NULL   -- Ïπ≠Ìò∏ Ïù¥ÎØ∏ÏßÄ
            );
        `);
        db.run(`

            CREATE TABLE IF NOT EXISTS user_achievement ( -- ÏÇ¨Ïö©ÏûêÍ∞Ä Î≥¥Ïú†Ìïú Ïπ≠Ìò∏ ÌÖåÏù¥Î∏î
                                                            user_id INTEGER NOT NULL,   -- ÏÇ¨Ïö©Ïûê ID
                                                            ach_id  INTEGER NOT NULL,   -- Ïπ≠Ìò∏ ID

                                                            FOREIGN KEY (user_id) REFERENCES user(user_id),
                FOREIGN KEY (ach_id) REFERENCES achievement(ach_id),
                PRIMARY KEY (user_id, ach_id)
                );
        `);
        db.run(`
            CREATE TABLE IF NOT EXISTS emblem ( -- Ïó†Î∏îÎüº ÌÖåÏù¥Î∏î
                                                  emblem_id INTEGER PRIMARY KEY AUTOINCREMENT,-- Ïó†Î∏îÎüº ID
                                                  title     TEXT NOT NULL,                    -- Ïó†Î∏îÎüºÎ™Ö
                                                  trigger   TEXT NOT NULL,                    -- Ïó†Î∏îÎüº ÌöçÎìù Ï°∞Í±¥
                                                  img       TEXT NOT NULL                     -- Ïó†Î∏îÎüº Ïù¥ÎØ∏ÏßÄ
            );
        `);
        db.run(`
            CREATE TABLE IF NOT EXISTS user_emblem ( -- ÏÇ¨Ïö©ÏûêÍ∞Ä Î≥¥Ïú†Ìïú Ïó†Î∏îÎüº ÌÖåÏù¥Î∏î
                                                       user_id   INTEGER NOT NULL, -- ÏÇ¨Ïö©Ïûê ID
                                                       emblem_id INTEGER NOT NULL, -- Ïó†Î∏îÎüº ID

                                                       FOREIGN KEY (user_id) REFERENCES user(user_id),
                FOREIGN KEY (emblem_id) REFERENCES emblem(emblem_id),
                PRIMARY KEY (user_id, emblem_id)
                );
        `);
        db.run(`
            CREATE TABLE IF NOT EXISTS title ( -- Ïπ≠Ìò∏ ÌÖåÏù¥Î∏î
                                                 title_id INTEGER PRIMARY KEY AUTOINCREMENT,-- Ïπ≠Ìò∏ ID
                                                 title    TEXT NOT NULL,                    -- Ïπ≠Ìò∏Î™Ö
                                                 trigger  TEXT NOT NULL                     -- Ïπ≠Ìò∏ ÌöçÎìù Ï°∞Í±¥
            );
        `);
        db.run(`
            CREATE TABLE IF NOT EXISTS user_title ( -- ÏÇ¨Ïö©ÏûêÍ∞Ä Î≥¥Ïú†Ìïú Ïπ≠Ìò∏ ÌÖåÏù¥Î∏î
                                                      user_id  INTEGER NOT NULL, -- ÏÇ¨Ïö©Ïûê ID
                                                      title_id INTEGER NOT NULL, -- Ïπ≠Ìò∏ ID

                                                      FOREIGN KEY (user_id) REFERENCES user(user_id),
                FOREIGN KEY (title_id) REFERENCES title(title_id),
                PRIMARY KEY (user_id, title_id)
                );
        `);
        console.log("‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å!");
        loadDatabaseFromLocalStorage();
    } catch (error) {
        console.error('Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
    }
}

function loadDatabaseFromLocalStorage() {
    try {
        const userData = JSON.parse(localStorage.getItem('user'));
        if (userData && userData.length > 0) {
            userData[0].values.forEach(user => {
                db.run("INSERT OR IGNORE INTO user (user_id, username, email, password, lv, xp, img) VALUES (?, ?, ?, ?, ?, ?, ?)",
                    [user[0], user[1], user[2], user[3], user[4], user[5], user[6]]);
            });
            console.log("‚úÖ user ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å!");
        }
        const diaryEventData = JSON.parse(localStorage.getItem('diary_event'));
        if (diaryEventData && diaryEventData.length > 0) {
            diaryEventData[0].values.forEach(event => {
                // 'com_lang' -> 'category'
                db.run("INSERT OR IGNORE INTO diary_event (event_id, user_id, title, category, memo, date, completed) VALUES (?, ?, ?, ?, ?, ?, ?)",
                    [event[0], event[1], event[2], event[3], event[4], event[5], event[6]]);
            });
            console.log("‚úÖ diary_event ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å!");
        }
        const achievementData = JSON.parse(localStorage.getItem('achievement'));
        if (achievementData && achievementData.length > 0) {
            achievementData[0].values.forEach(achievement => {
                db.run("INSERT OR IGNORE INTO achievement (ach_id, title, flavor, trigger, img) VALUES (?, ?, ?, ?, ?)",
                    [achievement[0], achievement[1], achievement[2], achievement[3], achievement[4]]);
            });
            console.log("‚úÖ achievement ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å!");
        }
        const userAchievementData = JSON.parse(localStorage.getItem('user_achievement'));
        if (userAchievementData && userAchievementData.length > 0) {
            userAchievementData[0].values.forEach(userAchievement => {
                db.run("INSERT OR IGNORE INTO user_achievement (user_id, ach_id) VALUES (?, ?)",
                    [userAchievement[0], userAchievement[1]]);
            });
            console.log("‚úÖ user_achievement ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å!");
        }
        // title ÌÖåÏù¥Î∏î Î°úÎìú Ï∂îÍ∞Ä
        const titleData = JSON.parse(localStorage.getItem('title'));
        if (titleData && titleData.length > 0) {
            titleData[0].values.forEach(title => {
                db.run("INSERT OR IGNORE INTO title (title_id, title, trigger) VALUES (?, ?, ?)",
                    [title[0], title[1], title[2]]);
            });
            console.log("‚úÖ title ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å!");
        }
        // user_title ÌÖåÏù¥Î∏î Î°úÎìú Ï∂îÍ∞Ä
        const userTitleData = JSON.parse(localStorage.getItem('user_title'));
        if (userTitleData && userTitleData.length > 0) {
            userTitleData[0].values.forEach(userTitle => {
                db.run("INSERT OR IGNORE INTO user_title (user_id, title_id) VALUES (?, ?)",
                    [userTitle[0], userTitle[1]]);
            });
            console.log("‚úÖ user_title ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å!");
        }
    } catch (error) {
        console.error('Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
    }
}

function saveUserToLocalStorage() {
    try {
        const user = db.exec("SELECT * FROM user");
        localStorage.setItem('user', JSON.stringify(user));
        localStorage.setItem('current_user', JSON.stringify(user));
        console.log("‚úÖ user ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏôÑÎ£å!");
    } catch (error) {
        console.error('user Ï†ÄÏû• Ïã§Ìå®:', error);
    }
}

function saveDiaryEventToLocalStorage() {
    try {
        const diary_event = db.exec("SELECT * FROM diary_event");
        localStorage.setItem('diary_event', JSON.stringify(diary_event));
        console.log("‚úÖ diary_event ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏôÑÎ£å!");
    } catch (error) {
        console.error('diary_event Ï†ÄÏû• Ïã§Ìå®:', error);
    }
}

function saveAchievementToLocalStorage() {
    try {
        const achievement = db.exec("SELECT * FROM achievement");
        localStorage.setItem('achievement', JSON.stringify(achievement));
        console.log("‚úÖ achievement ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏôÑÎ£å!");
    } catch (error) {
        console.error('achievement Ï†ÄÏû• Ïã§Ìå®:', error);
    }
}

function saveUserAchievementToLocalStorage() {
    try {
        const user_achievement = db.exec("SELECT * FROM user_achievement");
        localStorage.setItem('user_achievement', JSON.stringify(user_achievement));
        console.log("‚úÖ user_achievement ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏôÑÎ£å!");
    } catch (error) {
        console.error('user_achievement Ï†ÄÏû• Ïã§Ìå®:', error);
    }
}

// title Ï†ÄÏû• Ìï®Ïàò Ï∂îÍ∞Ä
function saveTitleToLocalStorage() {
    try {
        const title = db.exec("SELECT * FROM title");
        localStorage.setItem('title', JSON.stringify(title));
        console.log("‚úÖ title ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏôÑÎ£å!");
    } catch (error) {
        console.error('title Ï†ÄÏû• Ïã§Ìå®:', error);
    }
}

// user_title Ï†ÄÏû• Ìï®Ïàò Ï∂îÍ∞Ä
function saveUserTitleToLocalStorage() {
    try {
        const user_title = db.exec("SELECT * FROM user_title");
        localStorage.setItem('user_title', JSON.stringify(user_title));
        console.log("‚úÖ user_title ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏôÑÎ£å!");
    } catch (error) {
        console.error('user_title Ï†ÄÏû• Ïã§Ìå®:', error);
    }
}

function updateLevelAndExp() {
    try {
        // profileLayout Î†àÎ≤® ÏóÖÎç∞Ïù¥Ìä∏
        const requiredXp = currentUser.lv + 1;
        if (levelDisplay) levelDisplay.textContent = `LV: ${currentUser.lv}`;

        // userInfoLayout Î†àÎ≤® ÏóÖÎç∞Ïù¥Ìä∏
        const lvClosed = document.querySelector(".LV_closed h1");
        if (lvClosed) lvClosed.textContent = `LV: ${currentUser.lv}`;

        if (expBar) {
            expBar.textContent = `${currentUser.xp}/${requiredXp}`;
            const expPercentage = (currentUser.xp / requiredXp) * 100;
            expBar.style.width = `${expPercentage}%`;
        }
        console.log(`‚úÖ Î†àÎ≤® Î∞è Í≤ΩÌóòÏπò UI ÏóÖÎç∞Ïù¥Ìä∏: LV ${currentUser.lv}, XP ${currentUser.xp}/${requiredXp}`);
    } catch (error) {
        console.error('Î†àÎ≤® Î∞è Í≤ΩÌóòÏπò ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
    }
}

window.addUser = function(name, email, password) {
    try {
        db.run("INSERT INTO user (username, email, password) VALUES (?, ?, ?)", [name, email, password]);
        saveUserToLocalStorage();
        displayUsers();
    } catch (error) {
        console.error('ÌöåÏõê Ï∂îÍ∞Ä Ïã§Ìå®:', error);
    }
};

window.displayUsers = function() {
    try {
        const result = db.exec("SELECT * FROM user");
        console.log("‚úÖ user ÌÖåÏù¥Î∏î:", result.length > 0 ? result[0].values.map(row => Object.fromEntries(row.map((val, idx) => [result[0].columns[idx], val]))) : []);
    } catch (error) {
        console.error('user ÌôïÏù∏ Ïã§Ìå®:', error);
    }
};

window.updateUser = function(name, email, password, lv, xp, img, id) {
    try {
        db.run("UPDATE user SET username=?, email=?, password=?, lv=?, xp=?, img=? WHERE user_id=?", [name, email, password, lv, xp, img, id]);
        saveUserToLocalStorage();
        displayUsers();
    } catch (error) {
        console.error('ÌöåÏõê Ï†ïÎ≥¥ ÏàòÏ†ï Ïã§Ìå®:', error);
    }
};

window.deleteUser = function(id) {
    try {
        db.run("DELETE FROM user WHERE user_id=?", [id]);
        saveUserToLocalStorage();
        displayUsers();
    } catch (error) {
        console.error('ÌöåÏõê ÏÇ≠Ï†ú Ïã§Ìå®:', error);
    }
};

window.checkCurrentUser = function() {
    console.log(currentUser);
};

window.checkDatabase = function() {
    try {
        console.log("‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉÅÌÉú ÌôïÏù∏:");
        const users = db.exec("SELECT * FROM user");
        console.log("- user ÌÖåÏù¥Î∏î:", users.length > 0 ? users[0].values.map(row => Object.fromEntries(row.map((val, idx) => [users[0].columns[idx], val]))) : []);
        const diaryEvents = db.exec("SELECT * FROM diary_event");
        console.log("- diary_event ÌÖåÏù¥Î∏î:", diaryEvents.length > 0 ? diaryEvents[0].values.map(row => Object.fromEntries(row.map((val, idx) => [diaryEvents[0].columns[idx], val]))) : []);
        const achievements = db.exec("SELECT * FROM achievement");
        console.log("- achievement ÌÖåÏù¥Î∏î:", achievements.length > 0 ? achievements[0].values.map(row => Object.fromEntries(row.map((val, idx) => [achievements[0].columns[idx], val]))) : []);
        const userAchievements = db.exec("SELECT * FROM user_achievement");
        console.log("- user_achievement ÌÖåÏù¥Î∏î:", userAchievements.length > 0 ? userAchievements[0].values.map(row => Object.fromEntries(row.map((val, idx) => [userAchievements[0].columns[idx], val]))) : []);
    } catch (error) {
        console.error('Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', error);
    }
};

window.displayDiaryEvents = function() {
    try {
        const result = db.exec("SELECT * FROM diary_event");
        console.log("‚úÖ diary_event ÌÖåÏù¥Î∏î:", result.length > 0 ? result[0].values.map(row => Object.fromEntries(row.map((val, idx) => [result[0].columns[idx], val]))) : []);
    } catch (error) {
        console.error('diary_event ÌôïÏù∏ Ïã§Ìå®:', error);
    }
};

window.displayAchievements = function() {
    try {
        const result = db.exec("SELECT * FROM achievement");
        console.log("‚úÖ achievement ÌÖåÏù¥Î∏î:", result.length > 0 ? result[0].values.map(row => Object.fromEntries(row.map((val, idx) => [result[0].columns[idx], val]))) : []);
    } catch (error) {
        console.error('achievement ÌôïÏù∏ Ïã§Ìå®:', error);
    }
};

window.displayUserAchievements = function() {
    try {
        const result = db.exec("SELECT * FROM user_achievement");
        console.log("‚úÖ user_achievement ÌÖåÏù¥Î∏î:", result.length > 0 ? result[0].values.map(row => Object.fromEntries(row.map((val, idx) => [result[0].columns[idx], val]))) : []);
    } catch (error) {
        console.error('user_achievement ÌôïÏù∏ Ïã§Ìå®:', error);
    }
};

// todo: displayTitle

const categoryColors = {
    Python: '#3776AB', Java: '#007396', C: '#A8B9CC', Cpp: '#00599C', Csharp: '#68217A',
    JavaScript: '#F7DF1E', HTML: '#E34F26', R: '#276DC3', Kotlin: '#F18E33', SQL: '#4479A1',
    Holiday: '#FF0000'
};

const achievementCategoryMap = {
    "Java Ï≤´Í±∏Ïùå": { category: "Java", requiredCount: 1, title: "", condition: "Java ÏùºÏ†ï 1Í∞ú ÏôÑÎ£å" },
    "Java Í≥†Ïàò": { category: "Java", requiredCount: 2, title: "", condition: "Java ÏùºÏ†ï 2Í∞ú ÏôÑÎ£å" },
    "JavaÏùò Ïã†": { category: "Java", requiredCount: 3, title: "‚òï JavaÏùò Ïã†", condition: "Java ÏùºÏ†ï 3Í∞ú ÏôÑÎ£å" },

    // Python (Í∏∞Ï°¥)
    "Python Ï≤´Í±∏Ïùå": { category: "Python", requiredCount: 1, title: "", condition: "Python ÏùºÏ†ï 1Í∞ú ÏôÑÎ£å" },
    "Python ÎßàÏä§ÌÑ∞": { category: "Python", requiredCount: 2, title: "", condition: "Python ÏùºÏ†ï 2Í∞ú ÏôÑÎ£å" },
    "PythonÏùò Ïã†": { category: "Python", requiredCount: 3, title: "üêç PythonÏùò Ïã†", condition: "Python ÏùºÏ†ï 3Í∞ú ÏôÑÎ£å" },

    // JavaScript (Í∏∞Ï°¥)
    "JS Ï≤´Í±∏Ïùå": { category: "JavaScript", requiredCount: 1, title: "", condition: "JavaScript ÏùºÏ†ï 1Í∞ú ÏôÑÎ£å" },
    "JS DOMÏùò Îã¨Ïù∏": { category: "JavaScript", requiredCount: 2, title: "", condition: "JavaScript ÏùºÏ†ï 2Í∞ú ÏôÑÎ£å" },
    "JS ÎßàÏä§ÌÑ∞": { category: "JavaScript", requiredCount: 3, title: "üß© JS ÏΩîÎìú ÎßàÏä§ÌÑ∞", condition: "JavaScript ÏùºÏ†ï 3Í∞ú ÏôÑÎ£å" },

    // HTML (Í∏∞Ï°¥)
    "Ï¥àÎ≥¥ ÌîÑÎ°†Ìä∏ÏóîÎìú": { category: "HTML", requiredCount: 1, title: "", condition: "HTML ÏùºÏ†ï 1Í∞ú ÏôÑÎ£å" },
    "HTML Í≥†Ïàò": { category: "HTML", requiredCount: 2, title: "", condition: "HTML ÏùºÏ†ï 2Í∞ú ÏôÑÎ£å" },
    "HTMLÏùò Ïã†": { category: "HTML", requiredCount: 3, title: "üìú HTMLÏùò Ïã†, üé® CSSÏùò Ïã†", condition: "HTML ÏùºÏ†ï 3Í∞ú ÏôÑÎ£å" },

    // SQL (Í∏∞Ï°¥)
    "SQL Ï≤´Í±∏Ïùå": { category: "SQL", requiredCount: 1, title: "", condition: "SQL ÏùºÏ†ï 1Í∞ú ÏôÑÎ£å" },
    "SQL Í≥†Ïàò": { category: "SQL", requiredCount: 2, title: "", condition: "SQL ÏùºÏ†ï 2Í∞ú ÏôÑÎ£å" },
    "SQLÏùò Ïã†": { category: "SQL", requiredCount: 3, title: "üóÑÔ∏è SQLÏùò Ïã†", condition: "SQL ÏùºÏ†ï 3Í∞ú ÏôÑÎ£å" },

    // C (Ï∂îÍ∞Ä)
    "C Ï≤´Í±∏Ïùå": { category: "C", requiredCount: 1, title: "", condition: "C ÏùºÏ†ï 1Í∞ú ÏôÑÎ£å" },
    "C Í≥†Ïàò": { category: "C", requiredCount: 2, title: "", condition: "C ÏùºÏ†ï 2Í∞ú ÏôÑÎ£å" },
    "CÏùò Ïã†": { category: "C", requiredCount: 3, title: "üîß CÏùò Ïã†", condition: "C ÏùºÏ†ï 3Í∞ú ÏôÑÎ£å" },

    // Cpp (C++) (Ï∂îÍ∞Ä)
    "C++ Ï≤´Í±∏Ïùå": { category: "Cpp", requiredCount: 1, title: "", condition: "C++ ÏùºÏ†ï 1Í∞ú ÏôÑÎ£å" },
    "C++ Í≥†Ïàò": { category: "Cpp", requiredCount: 2, title: "", condition: "C++ ÏùºÏ†ï 2Í∞ú ÏôÑÎ£å" },
    "C++Ïùò Ïã†": { category: "Cpp", requiredCount: 3, title: "‚öôÔ∏è C++Ïùò Ïã†", condition: "C++ ÏùºÏ†ï 3Í∞ú ÏôÑÎ£å" },

    // Csharp (C#) (Ï∂îÍ∞Ä)
    "C# Ï≤´Í±∏Ïùå": { category: "Csharp", requiredCount: 1, title: "", condition: "C# ÏùºÏ†ï 1Í∞ú ÏôÑÎ£å" },
    "C# Í≥†Ïàò": { category: "Csharp", requiredCount: 2, title: "", condition: "C# ÏùºÏ†ï 2Í∞ú ÏôÑÎ£å" },
    "C#Ïùò Ïã†": { category: "Csharp", requiredCount: 3, title: "üéπ C#Ïùò Ïã†", condition: "C# ÏùºÏ†ï 3Í∞ú ÏôÑÎ£å" },

    // R (Ï∂îÍ∞Ä)
    "R Ï≤´Í±∏Ïùå": { category: "R", requiredCount: 1, title: "", condition: "R ÏùºÏ†ï 1Í∞ú ÏôÑÎ£å" },
    "R Í≥†Ïàò": { category: "R", requiredCount: 2, title: "", condition: "R ÏùºÏ†ï 2Í∞ú ÏôÑÎ£å" },
    "RÏùò Ïã†": { category: "R", requiredCount: 3, title: "üìä RÏùò Ïã†", condition: "R ÏùºÏ†ï 3Í∞ú ÏôÑÎ£å" },

    // Kotlin (Ï∂îÍ∞Ä)
    "Kotlin Ï≤´Í±∏Ïùå": { category: "Kotlin", requiredCount: 1, title: "", condition: "Kotlin ÏùºÏ†ï 1Í∞ú ÏôÑÎ£å" },
    "Kotlin Í≥†Ïàò": { category: "Kotlin", requiredCount: 2, title: "", condition: "Kotlin ÏùºÏ†ï 2Í∞ú ÏôÑÎ£å" },
    "KotlinÏùò Ïã†": { category: "Kotlin", requiredCount: 3, title: "ü§ñ KotlinÏùò Ïã†", condition: "Kotlin ÏùºÏ†ï 3Í∞ú ÏôÑÎ£å" },

    // General (Í∏∞Ï°¥)
    "Ï†ïÏõê Í¥ÄÎ¶¨ÏÇ¨": { category: "General", requiredCount: 3, title: "üè° Ï†ïÏõê Í¥ÄÎ¶¨ÏÇ¨", condition: "Ïª§Î∞ã 3Í∞ú ÏôÑÎ£å" },
    "ÏßÄÏò•ÏóêÏÑú Ïò®": { category: "General", requiredCount: 5, title: "üî• ÏßÄÏò•ÏóêÏÑú Ïò®", condition: "Ïª§Î∞ã 5Í∞ú ÏôÑÎ£å" },
    "ÏΩîÎ¶∞Ïù¥": { category: "General", requiredCount: 1, title: "üê£ ÏΩîÎ¶∞Ïù¥", condition: "ÏùºÏ†ï 1Í∞ú ÏôÑÎ£å" },
    "ÌîÑÎ°úÍ∞ìÏÉùÎü¨": { category: "General", requiredCount: 3, title: "üöÄ ÌîÑÎ°ú Í∞ìÏÉùÎü¨", condition: "ÏùºÏ†ï 3Í∞ú ÏôÑÎ£å" },
    "ÌååÏõåJ": { category: "General", requiredCount: 4, title: "‚ö° ÌååÏõå J", condition: "ÏùºÏ†ï 4Í∞ú ÏôÑÎ£å" },
    "ÏûêÍ∏∞Í≥ÑÎ∞úÏôï": { category: "General", requiredCount: 5, title: "üìö ÏûêÍ∏∞Í≥ÑÎ∞ú ÎÅùÌåêÏôï", condition: "ÏùºÏ†ï 5Í∞ú ÏôÑÎ£å" },

    "Îã•ÌÑ∞ Ïä§Ìä∏Î†àÏù∏ÏßÄ": { category: "General", requiredCount: 6, title: "‚è≥ Îã•ÌÑ∞ Ïä§Ìä∏Î†àÏù∏ÏßÄ", condition: "ÏùºÏ†ï 6Í∞ú ÏôÑÎ£å" },

    // Î≤ÑÍ∑∏ ÌóåÌÑ∞ Í¥ÄÎ†® ÏóÖÏ†Å
    // "ÏÉàÏãπ ÎîîÎ≤ÑÍ±∞": { category: "Debug", requiredCount: 1, title: "üå± ÏÉàÏãπ ÎîîÎ≤ÑÍ±∞" },
    // "Î≤ÑÍ∑∏ ÌóåÌÑ∞": { category: "Debug", requiredCount: 2, title: "üîç Î≤ÑÍ∑∏ ÌóåÌÑ∞" },
    // "ÎîîÎ≤ÑÍπÖ ÎßàÏä§ÌÑ∞": { category: "Debug", requiredCount: 3, title: "üõ†Ô∏è ÎîîÎ≤ÑÍπÖ ÎßàÏä§ÌÑ∞" },
    // "Î≤ÑÍ∑∏ ÏóëÏÜåÏãúÏä§Ìä∏": { category: "Debug", requiredCount: 4, title: "üëª Î≤ÑÍ∑∏ ÏóëÏÜåÏãúÏä§Ìä∏" },
    // "ÏôÄÏùºÎìú Î©òÌÉà": { category: "Debug", requiredCount: 1, title: "üêÜ wild-mental" }

};


document.addEventListener("DOMContentLoaded", async function () {
    console.log("‚úÖ DOMContentLoaded Ïã§ÌñâÎê®");
    console.log("Bootstrap JS Î°úÎìú Ïó¨Î∂Ä ÌôïÏù∏:", typeof bootstrap);
    await initDatabase();

    profileInner.classList.add("profileInvisible");
    exp.classList.add("profileInvisible"); //Í≤ΩÌóòÏπò Î∞î Ï¥àÍ∏∞ÏÉÅÌÉú ÏàòÏ†ï (expBar -> exp)
    medalBox.classList.add("profileInvisible");
    userInfoLayout.classList.remove("profileInvisible");

    function changeBannerText() {
        const randomIndex = Math.floor(Math.random() * messages.length);
        banner.textContent = messages[randomIndex];
    }
    changeBannerText();
    setInterval(changeBannerText, 3000);

    // ÏÇ¨Ïù¥ÎìúÎ∞î Hover(ÌéºÏ≥êÏßÑ ÏÉÅÌô©)Ïù¥Î≤§Ìä∏Ïãú Î†àÏù¥ÏïÑÏõÉ,ÎîîÏûêÏù∏ Î≥ÄÌôî
    sidebar.addEventListener("mouseenter", function () {
        profileInner.classList.remove("profileInvisible");
        exp.classList.remove("profileInvisible");
        // expBarContainer.classList.remove("profileInvisible");
        medalBox.classList.remove("profileInvisible");
        medalBox.style.height = "20%";
        userInfoLayout.classList.add("profileInvisible");
        profileLayout.style.marginTop = "0";
        profileLayout.style.marginBottom = "0";
        profileImg.style.width = "140px";
        profileImg.style.height = "140px";
        profile.style.left = "70%";
        userInfoLayout.style.marginTop = "0";
        achievement_p.forEach(p => p.style.opacity = "1");
    });

    // ÏÇ¨Ïù¥ÎìúÎ∞î Hover(Ï†ëÌòÄÏßÑ ÏÉÅÌô©)Ïù¥Î≤§Ìä∏ Ï¢ÖÎ£åÏãú Î†àÏù¥ÏïÑÏõÉ,ÎîîÏûêÏù∏ Î≥ÄÌôî
    sidebar.addEventListener("mouseleave", function () {
        profileInner.classList.add("profileInvisible");
        exp.classList.add("profileInvisible");
        // expBarContainer.classList.add("profileInvisible");
        medalBox.classList.add("profileInvisible");
        medalBox.style.height = "0px";
        userInfoLayout.classList.remove("profileInvisible");
        profileImg.style.width = "170px";
        profileImg.style.height = "170px";
        userInfoLayout.style.marginTop = "20%";
        achievement_p.forEach(p => p.style.opacity = "0");
    });

    const categorySelect = document.getElementById("eventCategory");
    if (categorySelect) {
        Object.keys(categoryColors).forEach(category => {
            const option = document.createElement("option");
            option.value = category;
            option.textContent = category;
            categorySelect.appendChild(option);
        });
    }

    content_title.forEach(title => {
        title.style.fontSize = "1.3em";
        title.style.marginLeft = "0.2em";
        title.style.width = "300px";
    });

    let tmp = JSON.parse(localStorage.getItem('current_user'));
    if (tmp && tmp.length > 0) {
        const user = tmp[0].values[0];
        currentUser.user_id = user[0];
        currentUser.username = user[1];
        currentUser.email = user[2];
        currentUser.password = user[3];
        currentUser.lv = user[4];
        currentUser.xp = user[5];
        currentUser.img = user[6];
        document.querySelector(".id").textContent = currentUser.username;
        document.querySelector(".id_closed").textContent = currentUser.username; // Ï∂îÍ∞Ä
        updateLevelAndExp();

        // ÏóÖÏ†Å Î∞è Ïπ≠Ìò∏ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
        try {
            const existingAchievements = db.exec("SELECT COUNT(*) as count FROM achievement")[0].values[0][0];
            if (existingAchievements === 0) {
                Object.entries(achievementCategoryMap).forEach(([achTitle, { condition, title: titlesStr }], index) => {
                    // ÏóÖÏ†Å ÏÇΩÏûÖ
                    db.run("INSERT OR IGNORE INTO achievement (title, flavor, trigger, img) VALUES (?, ?, ?, ?)",
                        [achTitle, titlesStr || "", condition, `achievement_${index + 1}.png`]);
                    const achIdResult = db.exec("SELECT ach_id FROM achievement WHERE title = ?", [achTitle]);
                    if (achIdResult.length > 0 && achIdResult[0].values.length > 0) {
                        const achId = achIdResult[0].values[0][0];
                        if (titlesStr) {
                            const titles = titlesStr.split(',').map(t => t.trim());
                            titles.forEach(title => {
                                // Ïπ≠Ìò∏ ÏÇΩÏûÖ
                                db.run("INSERT OR IGNORE INTO title (title, trigger) VALUES (?, ?)",
                                    [title, condition]);
                                const titleIdResult = db.exec("SELECT title_id FROM title WHERE title = ?", [title]);
                                if (titleIdResult.length > 0 && titleIdResult[0].values.length > 0) {
                                    const titleId = titleIdResult[0].values[0][0];
                                    // ÏóÖÏ†ÅÍ≥º Ïπ≠Ìò∏ Ïó∞Í≤∞ (achievement_title ÌÖåÏù¥Î∏îÏù¥ ÏóÜÏúºÎØÄÎ°ú ÏÉùÎûµ, ÌïÑÏöî Ïãú Ï∂îÍ∞Ä)
                                }
                            });
                        }
                    }
                });
                saveAchievementToLocalStorage();
                saveTitleToLocalStorage();
                console.log("‚úÖ achievement Î∞è title Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ ÏôÑÎ£å!");
            }
        } catch (error) {
            console.error('ÏóÖÏ†Å Î∞è Ïπ≠Ìò∏ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
        }

        // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú Ìï¥Í∏àÎêú Ïπ≠Ìò∏ Ï¥àÍ∏∞Ìôî
        // ÏàòÏ†ï: unlockedTitles Ï†úÍ±∞, Ï¶âÏãú initializeTitles Ìò∏Ï∂úÎ°ú ÎåÄÏ≤¥
        try {
            initializeTitles(); // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú Ïπ≠Ìò∏ Ï¥àÍ∏∞Ìôî
        } catch (error) {
            console.error('Ïπ≠Ìò∏ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
        }
    } else {
        console.warn("‚ö†Ô∏è Î°úÍ∑∏Ïù∏Îêú Ïú†Ï†Ä Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.");
    }

    const calendarEl = document.getElementById('calendar');
    if (!calendarEl) {
        console.error("‚ùå Ï∫òÎ¶∞Îçî ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
    } else {
        calendarInstance = new FullCalendar.Calendar(calendarEl, {
            height: '700px',
            locale: 'ko',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
            },
            initialView: 'dayGridMonth',
            initialDate: '2025-02-26',
            selectable: true,
            dateClick: function(info) {
                window.open('check_event.html?date=' + info.dateStr, 'eventPopup', 'width=500,height=500');
            },
            eventClick: function(info) {
                window.open('check_event.html?date=' + info.event.startStr, 'eventPopup', 'width=500,height=500');
            },
            events: async function(fetchInfo, successCallback) {
                const localEvents = loadEventsFromLocalStorage();
                const holidayEvents = await fetchHolidays();
                successCallback([...localEvents, ...holidayEvents]);
            },
            eventDidMount: function(info) {
                if (info.event.extendedProps.completed) {
                    info.el.querySelector('.fc-event-title').style.textDecoration = 'line-through';
                }
            }
        });
        calendarInstance.render();
        window.calendar = calendarInstance;
    }

    async function fetchHolidays() {
        try {
            const url = 'https://date.nager.at/api/v3/publicholidays/2025/KR';
            const response = await fetch(url);
            if (!response.ok) throw new Error(`HTTP Ïò§Î•ò: ${response.status}`);
            const holidays = await response.json();
            return holidays.map(holiday => ({
                title: holiday.localName,
                start: holiday.date,
                allDay: true,
                backgroundColor: categoryColors['Holiday'],
                borderColor: categoryColors['Holiday'],
                extendedProps: { memo: holiday.name || '', category: 'Holiday', isHoliday: true, completed: false }
            }));
        } catch (error) {
            console.error('Í≥µÌú¥Ïùº Í∞ÄÏ†∏Ïò§Í∏∞ Ïò§Î•ò:', error);
            return [];
        }
    }

    window.addEventToCalendar = function(date, title, category) {
        try {
            const events = JSON.parse(localStorage.getItem('events') || '{}');
            if (!events[date]) events[date] = [];
            const exists = events[date].some(event => event.title === title && event.category === category);
            if (!exists) {
                events[date].push({ title, category, memo: '', completed: false });
                localStorage.setItem('events', JSON.stringify(events));
                calendarInstance.getEvents().forEach(event => {
                    if (event.startStr === date && event.title === `${title} (${category})`) {
                        event.remove();
                    }
                });
                calendarInstance.addEvent({
                    title: `${title} (${category})`,
                    start: date,
                    allDay: true,
                    backgroundColor: categoryColors[category],
                    borderColor: categoryColors[category],
                    extendedProps: { memo: '', completed: false }
                });
                if (!currentUser.user_id) {
                    console.error("‚ö†Ô∏è Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§. user_idÍ∞Ä ÏóÜÏäµÎãàÎã§.");
                    alert("ÏùºÏ†ïÏùÑ Ï∂îÍ∞ÄÌïòÎ†§Î©¥ Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
                    return;
                }
                // com_lang -> category
                db.run("INSERT INTO diary_event (user_id, title, category, date) VALUES (?, ?, ?, ?)",
                    [currentUser.user_id, title, category, date]);
                saveDiaryEventToLocalStorage();
                console.log(`‚úÖ ÏùºÏ†ï Ï∂îÍ∞Ä ÏôÑÎ£å: ${date}, ${title}, ${category}`);

                // ÏàòÏ†ï: ÏóÖÏ†Å ÏÉÅÌÉú Ï¶âÏãú ÌôïÏù∏
                updateMedals();
            } else {
                console.log(`Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÏùºÏ†ï: ${title} (${category})`);
            }
        } catch (error) {
            console.error('ÏùºÏ†ï Ï∂îÍ∞Ä Ïã§Ìå®:', error);
        }
    };

    window.completeEvent = function(date, index) {
        try {
            const events = JSON.parse(localStorage.getItem('events') || '{}');
            if (events[date] && events[date][index]) {
                const wasCompleted = events[date][index].completed;
                if (wasCompleted) {
                    events[date][index].completed = true;
                    localStorage.setItem('events', JSON.stringify(events));
                    currentUser.xpUp(1); // Í≤ΩÌóòÏπò Ï¶ùÍ∞Ä

                    // Ï∫òÎ¶∞Îçî Ïù¥Î≤§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
                    const calendarEvents = calendarInstance.getEvents();
                    const targetEvent = calendarEvents.find(event =>
                        event.startStr === date && event.title === `${events[date][index].title} (${events[date][index].category})`
                    );
                    if (targetEvent) {
                        targetEvent.setExtendedProp('completed', true);
                        const titleElement = targetEvent.el ? targetEvent.el.querySelector('.fc-event-title') : null;
                        if (titleElement) {
                            titleElement.style.textDecoration = 'line-through';
                            console.log(`‚úÖ ÎùºÏù∏Ïä§Î£® Ï†ÅÏö©: ${events[date][index].title}`);
                        }
                    }

                    // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏
                    const eventIdResult = db.exec("SELECT event_id FROM diary_event WHERE user_id=? AND date=? AND title=? AND category=?",
                        [currentUser.user_id, date, events[date][index].title, events[date][index].category]);
                    if (eventIdResult.length > 0 && eventIdResult[0].values.length > 0) {
                        const eventId = eventIdResult[0].values[0][0];
                        db.run("UPDATE diary_event SET completed=TRUE WHERE event_id=?", [eventId]);
                        saveDiaryEventToLocalStorage();
                    }

                    console.log(`‚úÖ ÏùºÏ†ï ÏôÑÎ£å: ${events[date][index].title}`);
                    calendarInstance.refetchEvents(); // Ï∫òÎ¶∞Îçî Ïã§ÏãúÍ∞Ñ Í∞±Ïã†
                    // checkDatabase();
                    updateMedals(); // ÏóÖÏ†Å ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (ÌåùÏóÖÏóêÏÑú Î©îÏãúÏßÄ Ï≤òÎ¶¨ÌïòÎØÄÎ°ú Ïó¨Í∏∞ÏÑúÎäî UIÎßå Í∞±Ïã†)
                    initializeTitles(); // Ïπ≠Ìò∏ ÎìúÎ°≠Îã§Ïö¥ Í∞±Ïã†
                    location.reload(); // Î∂ÄÎ™® Ï∞Ω ÏÉàÎ°úÍ≥†Ïπ®
                } else {
                    console.log("‚ÑπÔ∏è Ïù¥ÎØ∏ ÏôÑÎ£åÎêú ÏùºÏ†ïÏûÖÎãàÎã§.");
                }
            } else {
                console.error("‚ùå Ìï¥Îãπ ÏùºÏ†ïÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
            }
        } catch (error) {
            console.error('ÏùºÏ†ï ÏôÑÎ£å Ï≤òÎ¶¨ Ïã§Ìå®:', error);
            calendarInstance.render();
        }
    };
    // window.completeEvent = function(date, index) {
    //     try {
    //         const events = JSON.parse(localStorage.getItem('events') || '{}');
    //         if (events[date] && events[date][index]) {
    //             const wasCompleted = events[date][index].completed;
    //             // !wasComplete -> wasComplete
    //             if (wasCompleted) {
    //                 if (confirm("ÏùºÏ†ïÏùÑ ÏôÑÎ£åÌïòÏãúÍ≤†ÏäµÎãàÍπå?")) { // ÏÇ¨Ïö©Ïûê ÌôïÏù∏
    //                     events[date][index].completed = true;
    //                     localStorage.setItem('events', JSON.stringify(events));
    //                     currentUser.xpUp(1);
    //
    //                     // Ï∫òÎ¶∞Îçî Ïù¥Î≤§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
    //                     const calendarEvents = calendarInstance.getEvents();
    //                     const targetEvent = calendarEvents.find(event =>
    //                         event.startStr === date && event.title === `${events[date][index].title} (${events[date][index].category})`
    //                     );
    //                     if (targetEvent) {
    //                         targetEvent.setExtendedProp('completed', true);
    //                         const titleElement = targetEvent.el ? targetEvent.el.querySelector('.fc-event-title') : null;
    //                         if (titleElement) {
    //                             titleElement.style.textDecoration = 'line-through';
    //                             console.log(`‚úÖ ÎùºÏù∏Ïä§Î£® Ï†ÅÏö©: ${events[date][index].title}`);
    //                         }
    //                     }
    //
    //                     // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏
    //                     const eventIdResult = db.exec("SELECT event_id FROM diary_event WHERE user_id=? AND date=? AND title=? AND category=?",
    //                         [currentUser.user_id, date, events[date][index].title, events[date][index].category]);
    //                     if (eventIdResult.length > 0 && eventIdResult[0].values.length > 0) {
    //                         const eventId = eventIdResult[0].values[0][0];
    //                         db.run("UPDATE diary_event SET completed=TRUE WHERE event_id=?", [eventId]);
    //                         saveDiaryEventToLocalStorage();
    //                     }
    //
    //                     // ÏóÖÏ†Å Î∞è Ïπ≠Ìò∏ ÌôïÏù∏
    //                     const previousTitles = db.exec("SELECT t.title FROM user_title ut JOIN title t ON ut.title_id = t.title_id WHERE ut.user_id = ?", [currentUser.user_id]);
    //                     const previousTitleCount = previousTitles.length > 0 ? previousTitles[0].values.length : 0;
    //
    //                     updateMedals(); // ÏóÖÏ†Å ÏóÖÎç∞Ïù¥Ìä∏
    //                     initializeTitles(); // Ïπ≠Ìò∏ ÎìúÎ°≠Îã§Ïö¥ Í∞±Ïã†
    //
    //                     const newTitles = db.exec("SELECT t.title FROM user_title ut JOIN title t ON ut.title_id = t.title_id WHERE ut.user_id = ?", [currentUser.user_id]);
    //                     const newTitleCount = newTitles.length > 0 ? newTitles[0].values.length : 0;
    //
    //                     // ÏóÖÏ†Å Ìï¥Í∏à Ïó¨Î∂Ä ÌôïÏù∏
    //                     const unlockedAchievements = db.exec("SELECT a.title FROM user_achievement ua JOIN achievement a ON ua.ach_id = a.ach_id WHERE ua.user_id = ?", [currentUser.user_id]);
    //                     const hasNewAchievement = unlockedAchievements.length > 0 && unlockedAchievements[0].values.length > 0;
    //
    //                     if (hasNewAchievement) {
    //                         if (newTitleCount > previousTitleCount) {
    //                             const newTitleIndex = newTitleCount - 1;
    //                             const newTitle = newTitles[0].values[newTitleIndex][0];
    //                             console.log("‚ÑπÔ∏è ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú Ïπ≠Ìò∏: ", newTitle);
    //                             alert(`ÏóÖÏ†ÅÏù¥ Ìï¥Í∏àÎêòÏóàÏäµÎãàÎã§! Ïπ≠Ìò∏Î•º ÌöçÎìùÌï©ÎãàÎã§: ${newTitle}`);
    //                         } else {
    //                             console.log("‚ÑπÔ∏è ÏóÖÏ†ÅÏùÄ Ìï¥Í∏àÎêòÏóàÏúºÎÇò ÏÉà Ïπ≠Ìò∏ ÏóÜÏùå");
    //                             alert("ÏóÖÏ†ÅÏù¥ Ìï¥Í∏àÎêòÏóàÏäµÎãàÎã§!");
    //                         }
    //                     } else {
    //                         console.log("‚ÑπÔ∏è ÏÉàÎ°úÏö¥ ÏóÖÏ†ÅÏù¥ Ìï¥Í∏àÎêòÏßÄ ÏïäÏùå");
    //                     }
    //
    //                     console.log(`‚úÖ ÏùºÏ†ï ÏôÑÎ£å: ${events[date][index].title}`);
    //                     calendarInstance.refetchEvents(); // Ï∫òÎ¶∞Îçî Ïã§ÏãúÍ∞Ñ Í∞±Ïã†
    //                     checkDatabase();
    //                     location.reload();
    //                 }
    //             } else {
    //                 console.log("‚ÑπÔ∏è Ïù¥ÎØ∏ ÏôÑÎ£åÎêú ÏùºÏ†ïÏûÖÎãàÎã§.");
    //             }
    //         } else {
    //             console.error("‚ùå Ìï¥Îãπ ÏùºÏ†ïÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
    //         }
    //     } catch (error) {
    //         console.error('ÏùºÏ†ï ÏôÑÎ£å Ï≤òÎ¶¨ Ïã§Ìå®:', error);
    //         calendarInstance.render();
    //     }
    // };

    function updateMedals() {
        try {
            const events = JSON.parse(localStorage.getItem('events') || '{}');
            const completedCounts = {};
            let totalCompleted = 0;
            for (const date in events) {
                // events[date].forEach(event => {
                //     if (event.completed) {
                //         completedCounts[event.category] = (completedCounts[event.category] || 0) + 1;
                //         totalCompleted++;
                //     }
                // ÏàòÏ†ï: events[date]Í∞Ä Î∞∞Ïó¥Ïù∏ÏßÄ ÌôïÏù∏
                const dateEvents = Array.isArray(events[date]) ? events[date] : [];
                dateEvents.forEach(event => {
                    if (event.completed) {
                        completedCounts[event.category] = (completedCounts[event.category] || 0) + 1;
                        totalCompleted++;
                    }
                });
            }

            // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÏùò ÏóÖÏ†Å ÏÉÅÌÉú Í∞ÄÏ†∏Ïò§Í∏∞
            let unlockedAchievements = {};
            const userAchievements = db.exec("SELECT a.title FROM user_achievement ua JOIN achievement a ON ua.ach_id = a.ach_id WHERE ua.user_id = ?", [currentUser.user_id]);
            if (userAchievements.length > 0) {
                userAchievements[0].values.forEach(([title]) => {
                    unlockedAchievements[title] = true;
                });
            }

            Object.keys(categoryColors).forEach(category => {
                const medal = document.getElementById(category.toLowerCase());
                if (medal) {
                    const count = completedCounts[category] || 0;
                    if (count >= 1) medal.classList.add('unlocked');
                    else medal.classList.remove('unlocked');
                }
            });
            const achievementItems = document.querySelectorAll('.achievementInner');
            const achievementContainer = document.querySelector('.achievement');
            const unlockedItems = [];
            const lockedItems = [];

            achievementItems.forEach(item => {
                const title = item.querySelector('h2').textContent.trim();
                const mapping = achievementCategoryMap[title] || { category: "General", requiredCount: 1 };
                const category = mapping.category;
                const requiredCount = mapping.requiredCount;
                const completedCount = completedCounts[category] || 0;
                const isUnlocked = category === "General" ? totalCompleted >= requiredCount : completedCount >= requiredCount;
                const descriptionP = item.querySelector('.content p');

                // ÏóÖÏ†Å Ìï¥Í∏à Ïãú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Í∏∞Î°ù
                if (isUnlocked && !unlockedAchievements[title]) {
                    const achIdResult = db.exec("SELECT ach_id FROM achievement WHERE title = ?", [title]);
                    if (achIdResult.length > 0 && achIdResult[0].values.length > 0) {
                        const achId = achIdResult[0].values[0][0];
                        db.run("INSERT OR IGNORE INTO user_achievement (user_id, ach_id) VALUES (?, ?)", [currentUser.user_id, achId]);
                        saveUserAchievementToLocalStorage();
                        unlockedAchievements[title] = true;
                        console.log(`‚úÖ ÏóÖÏ†Å Ìï¥Í∏à: ${title}`);

                        // Ïπ≠Ìò∏ Ï∂îÍ∞Ä
                        if (mapping.title) {
                            const titles = mapping.title.split(',').map(t => t.trim());
                            titles.forEach(titleText => {
                                db.run("INSERT OR IGNORE INTO title (title, trigger) VALUES (?, ?)",
                                    [titleText, mapping.condition]);
                                const titleIdResult = db.exec("SELECT title_id FROM title WHERE title = ?", [titleText]);
                                if (titleIdResult.length > 0 && titleIdResult[0].values.length > 0) {
                                    const titleId = titleIdResult[0].values[0][0];
                                    db.run("INSERT OR IGNORE INTO user_title (user_id, title_id) VALUES (?, ?)",
                                        [currentUser.user_id, titleId]);
                                    saveUserTitleToLocalStorage();
                                    addTitleToDropdown(titleText);
                                }
                            });
                        }
                    }
                }

                if (isUnlocked) {
                    item.classList.add('unlocked');
                    descriptionP.textContent = descriptionP.dataset.originalText || descriptionP.textContent;
                    unlockedItems.push(item);
                } else {
                    item.classList.remove('unlocked');
                    item.style.opacity = '0.7';
                    if (!descriptionP.dataset.originalText) {
                        descriptionP.dataset.originalText = descriptionP.textContent;
                    }
                    descriptionP.textContent = mapping.condition || "Ìï¥Í∏à Ï°∞Í±¥ ÎØ∏Ï†ï";
                    lockedItems.push(item);
                }
            });

            achievementContainer.innerHTML = '';
            unlockedItems.forEach(item => achievementContainer.appendChild(item));
            lockedItems.forEach(item => achievementContainer.appendChild(item));
            console.log("‚úÖ Î©îÎã¨ Î∞è ÏóÖÏ†Å ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å");
        } catch (error) {
            console.error('Î©îÎã¨ Î∞è ÏóÖÏ†Å ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
        }
    }

    // let unlockedTitles = JSON.parse(localStorage.getItem('unlockedTitles')) || [];
    function initializeTitles() {
        if (dropdownMenu) {
            dropdownMenu.innerHTML = '';
            const defaultItem = document.createElement('div');
            defaultItem.className = 'dropdown-item';
            defaultItem.textContent = ' ';
            defaultItem.addEventListener('click', () => {
                selectedTitle.textContent = ' ';
                selectedTitle.className = 'userTitle text-white fw-bold';
                document.querySelector(".userTitle_closed").textContent = ' '; // Ï∂îÍ∞Ä
            });
            dropdownMenu.appendChild(defaultItem);

            // user_titleÏóêÏÑú Ïπ≠Ìò∏ Í∞ÄÏ†∏Ïò§Í∏∞
            const userTitles = db.exec(
                "SELECT t.title FROM user_title ut JOIN title t ON ut.title_id = t.title_id WHERE ut.user_id = ?",
                [currentUser.user_id]
            );
            if (userTitles.length > 0) {
                userTitles[0].values.forEach(([title]) => {
                    addTitleToDropdown(title);
                });
            }

            // Ï†ÄÏû•Îêú Ïπ≠Ìò∏ Î≥µÏõê
            const savedTitle = localStorage.getItem('selectedTitle');
            const userTitleClosed = document.querySelector(".userTitle_closed");
            if (savedTitle && savedTitle !== '') {
                selectedTitle.textContent = savedTitle;
                if (userTitleClosed) userTitleClosed.textContent = savedTitle;
                selectedTitle.className = 'userTitle text-white fw-bold';
                if (userTitleClosed) userTitleClosed.className = 'userTitle_closed'; // Í∏∞Î≥∏ ÌÅ¥ÎûòÏä§ Ï¥àÍ∏∞Ìôî
                switch (savedTitle) {
                    case "‚òï JavaÏùò Ïã†":
                        selectedTitle.classList.add('title-java');
                        userTitleClosed.classList.add('title-java');
                        break;
                    case "üêç PythonÏùò Ïã†":
                        selectedTitle.classList.add('title-python');
                        userTitleClosed.classList.add('title-python');
                        break;
                    // ÎÇòÎ®∏ÏßÄ caseÎì§ÎèÑ ÎèôÏùºÌïòÍ≤å .userTitle_closedÏóê Ï∂îÍ∞Ä
                    case "üìú HTMLÏùò Ïã†":
                        selectedTitle.classList.add('title-html');
                        userTitleClosed.classList.add('title-html');
                        break;
                    case "üé® CSSÏùò Ïã†":
                        selectedTitle.classList.add('title-css');
                        userTitleClosed.classList.add('title-css');
                        break;
                    case "üß© JS ÏΩîÎìú ÎßàÏä§ÌÑ∞":
                        selectedTitle.classList.add('title-js');
                        userTitleClosed.classList.add('title-js');
                        break;
                    case "üóÑÔ∏è SQLÏùò Ïã†":
                        selectedTitle.classList.add('title-sql');
                        userTitleClosed.classList.add('title-sql');
                        break;
                    case "üè° Ï†ïÏõê Í¥ÄÎ¶¨ÏÇ¨":
                        selectedTitle.classList.add('title-gardener');
                        userTitleClosed.classList.add('title-gardener');
                        break;
                    case "üî• ÏßÄÏò•ÏóêÏÑú Ïò®":
                        selectedTitle.classList.add('title-hell');
                        userTitleClosed.classList.add('title-hell');
                        break;
                    case "‚è≥ Îã•ÌÑ∞ Ïä§Ìä∏Î†àÏù∏ÏßÄ":
                        selectedTitle.classList.add('title-strange');
                        userTitleClosed.classList.add('title-strange');
                        break;
                    case "üëª Î≤ÑÍ∑∏ ÏóëÏÜåÏãúÏä§Ìä∏":
                        selectedTitle.classList.add('title-exorcist');
                        userTitleClosed.classList.add('title-exorcist');
                        break;
                    case "üê£ ÏΩîÎ¶∞Ïù¥":
                        selectedTitle.classList.add('title-newbie');
                        userTitleClosed.classList.add('title-newbie');
                        break;
                    case "üöÄ ÌîÑÎ°ú Í∞ìÏÉùÎü¨":
                        selectedTitle.classList.add('title-pro');
                        userTitleClosed.classList.add('title-pro');
                        break;
                    case "‚ö° ÌååÏõå J":
                        selectedTitle.classList.add('title-power');
                        userTitleClosed.classList.add('title-power');
                        break;
                    case "üìö ÏûêÍ∏∞Í≥ÑÎ∞ú ÎÅùÌåêÏôï":
                        selectedTitle.classList.add('title-self');
                        userTitleClosed.classList.add('title-self');
                        break;
                    case "üå± ÏÉàÏãπ ÎîîÎ≤ÑÍ±∞":
                        selectedTitle.classList.add('title-sprout');
                        userTitleClosed.classList.add('title-sprout');
                        break;
                    case "üîç Î≤ÑÍ∑∏ ÌóåÌÑ∞":
                        selectedTitle.classList.add('title-hunter');
                        userTitleClosed.classList.add('title-hunter');
                        break;
                    case "üõ†Ô∏è ÎîîÎ≤ÑÍπÖ ÎßàÏä§ÌÑ∞":
                        selectedTitle.classList.add('title-debug');
                        userTitleClosed.classList.add('title-debug');
                        break;
                    case "üêÜ wild-mental":
                        selectedTitle.classList.add('title-wild-mental');
                        userTitleClosed.classList.add('title-wild-mental');
                        break;
                }
            }
            console.log("‚úÖ Ïπ≠Ìò∏ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å");
        }
    }

    function addTitleToDropdown(title) {
        if (dropdownMenu && selectedTitle) {
            // Ï§ëÎ≥µ Ï≤¥ÌÅ¨Î•º DBÏóêÏÑú ÏàòÌñâÌïòÎØÄÎ°ú localStorage Ï†úÍ±∞
            const exists = db.exec("SELECT COUNT(*) FROM user_title ut JOIN title t ON ut.title_id = t.title_id WHERE ut.user_id = ? AND t.title = ?",
                [currentUser.user_id, title])[0].values[0][0] > 0;
            if (!exists) {
                db.run("INSERT OR IGNORE INTO title (title, trigger) VALUES (?, ?)", [title, "ÏóÖÏ†Å Ìï¥Í∏à"]);
                const titleIdResult = db.exec("SELECT title_id FROM title WHERE title = ?", [title]);
                if (titleIdResult.length > 0 && titleIdResult[0].values.length > 0) {
                    const titleId = titleIdResult[0].values[0][0];
                    db.run("INSERT OR IGNORE INTO user_title (user_id, title_id) VALUES (?, ?)",
                        [currentUser.user_id, titleId]);
                    saveUserTitleToLocalStorage();
                }
            }

            // const item = document.createElement('div');
            // item.className = 'dropdown-item';
            // item.textContent = title;
            // item.addEventListener('click', () => {
            //     selectedTitle.textContent = title;
            //     selectedTitle.className = 'userTitle text-white fw-bold';
            //     switch (title) {
            //         case "‚òï JavaÏùò Ïã†": selectedTitle.classList.add('title-java'); break;
            //         case "üêç PythonÏùò Ïã†": selectedTitle.classList.add('title-python'); break;
            //         case "üìú HTMLÏùò Ïã†": selectedTitle.classList.add('title-html'); break;
            //         case "üé® CSSÏùò Ïã†": selectedTitle.classList.add('title-css'); break;
            //         case "üß© JS ÏΩîÎìú ÎßàÏä§ÌÑ∞": selectedTitle.classList.add('title-js'); break;
            //         case "üóÑÔ∏è SQLÏùò Ïã†": selectedTitle.classList.add('title-sql'); break;
            //         case "üè° Ï†ïÏõê Í¥ÄÎ¶¨ÏÇ¨": selectedTitle.classList.add('title-gardener'); break;
            //         case "üî• ÏßÄÏò•ÏóêÏÑú Ïò®": selectedTitle.classList.add('title-hell'); break;
            //         case "‚è≥ Îã•ÌÑ∞ Ïä§Ìä∏Î†àÏù∏ÏßÄ": selectedTitle.classList.add('title-strange'); break;
            //         case "üëª Î≤ÑÍ∑∏ ÏóëÏÜåÏãúÏä§Ìä∏": selectedTitle.classList.add('title-exorcist'); break;
            //         case "üê£ ÏΩîÎ¶∞Ïù¥": selectedTitle.classList.add('title-newbie'); break;
            //         case "üöÄ ÌîÑÎ°ú Í∞ìÏÉùÎü¨": selectedTitle.classList.add('title-pro'); break;
            //         case "‚ö° ÌååÏõå J": selectedTitle.classList.add('title-power'); break;
            //         case "üìö ÏûêÍ∏∞Í≥ÑÎ∞ú ÎÅùÌåêÏôï": selectedTitle.classList.add('title-self'); break;
            //         case "üå± ÏÉàÏãπ ÎîîÎ≤ÑÍ±∞": selectedTitle.classList.add('title-sprout'); break;
            //         case "üîç Î≤ÑÍ∑∏ ÌóåÌÑ∞": selectedTitle.classList.add('title-hunter'); break;
            //         case "üõ†Ô∏è ÎîîÎ≤ÑÍπÖ ÎßàÏä§ÌÑ∞": selectedTitle.classList.add('title-debug'); break;
            //         case "üêÜ wild-mental": selectedTitle.classList.add('title-wild-mental'); break;
            //     }
            // });
            // ÏàòÏ†ï: ÎìúÎ°≠Îã§Ïö¥Ïóê Ï§ëÎ≥µ ÏóÜÏù¥ Ï∂îÍ∞Ä
            const existingItems = Array.from(dropdownMenu.querySelectorAll('.dropdown-item')).map(item => item.textContent);
            if (!existingItems.includes(title)) {
                const item = document.createElement('div');
                item.className = 'dropdown-item';
                item.textContent = title;
                item.addEventListener('click', () => {
                    const userTitleClosed = document.querySelector(".userTitle_closed"); // Îã´Ìûå ÏÉÅÌÉú Ïπ≠Ìò∏ ÏöîÏÜå
                    selectedTitle.textContent = title;
                    userTitleClosed.textContent = title;
                    document.querySelector(".userTitle_closed").textContent = title; // Ï∂îÍ∞Ä
                    selectedTitle.className = 'userTitle text-white fw-bold';
                    userTitleClosed.className = 'userTitle_closed'; // Í∏∞Î≥∏ ÌÅ¥ÎûòÏä§ Ï¥àÍ∏∞Ìôî
                    switch (title) {
                        case "‚òï JavaÏùò Ïã†":
                            selectedTitle.classList.add('title-java');
                            userTitleClosed.classList.add('title-java'); // Ï∂îÍ∞Ä
                            break;
                        case "üêç PythonÏùò Ïã†":
                            selectedTitle.classList.add('title-python');
                            userTitleClosed.classList.add('title-python'); // Ï∂îÍ∞Ä
                            break;
                        case "üìú HTMLÏùò Ïã†":
                            selectedTitle.classList.add('title-html');
                            userTitleClosed.classList.add('title-html'); // Ï∂îÍ∞Ä
                            break;
                        case "üé® CSSÏùò Ïã†":
                            selectedTitle.classList.add('title-css');
                            userTitleClosed.classList.add('title-css'); // Ï∂îÍ∞Ä
                            break;
                        case "üß© JS ÏΩîÎìú ÎßàÏä§ÌÑ∞":
                            selectedTitle.classList.add('title-js');
                            userTitleClosed.classList.add('title-js'); // Ï∂îÍ∞Ä
                            break;
                        case "üóÑÔ∏è SQLÏùò Ïã†":
                            selectedTitle.classList.add('title-sql');
                            userTitleClosed.classList.add('title-sql'); // Ï∂îÍ∞Ä
                            break;
                        case "üè° Ï†ïÏõê Í¥ÄÎ¶¨ÏÇ¨":
                            selectedTitle.classList.add('title-gardener');
                            userTitleClosed.classList.add('title-gardener'); // Ï∂îÍ∞Ä
                            break;
                        case "üî• ÏßÄÏò•ÏóêÏÑú Ïò®":
                            selectedTitle.classList.add('title-hell');
                            userTitleClosed.classList.add('title-hell'); // Ï∂îÍ∞Ä
                            break;
                        case "‚è≥ Îã•ÌÑ∞ Ïä§Ìä∏Î†àÏù∏ÏßÄ":
                            selectedTitle.classList.add('title-strange');
                            userTitleClosed.classList.add('title-strange'); // Ï∂îÍ∞Ä
                            break;
                        case "üëª Î≤ÑÍ∑∏ ÏóëÏÜåÏãúÏä§Ìä∏":
                            selectedTitle.classList.add('title-exorcist');
                            userTitleClosed.classList.add('title-exorcist'); // Ï∂îÍ∞Ä
                            break;
                        case "üê£ ÏΩîÎ¶∞Ïù¥":
                            selectedTitle.classList.add('title-newbie');
                            userTitleClosed.classList.add('title-newbie'); // Ï∂îÍ∞Ä
                            break;
                        case "üöÄ ÌîÑÎ°ú Í∞ìÏÉùÎü¨":
                            selectedTitle.classList.add('title-pro');
                            userTitleClosed.classList.add('title-pro'); // Ï∂îÍ∞Ä
                            break;
                        case "‚ö° ÌååÏõå J":
                            selectedTitle.classList.add('title-power');
                            userTitleClosed.classList.add('title-power'); // Ï∂îÍ∞Ä
                            break;
                        case "üìö ÏûêÍ∏∞Í≥ÑÎ∞ú ÎÅùÌåêÏôï":
                            selectedTitle.classList.add('title-self');
                            userTitleClosed.classList.add('title-self'); // Ï∂îÍ∞Ä
                            break;
                        case "üå± ÏÉàÏãπ ÎîîÎ≤ÑÍ±∞":
                            selectedTitle.classList.add('title-sprout');
                            userTitleClosed.classList.add('title-sprout'); // Ï∂îÍ∞Ä
                            break;
                        case "üîç Î≤ÑÍ∑∏ ÌóåÌÑ∞":
                            selectedTitle.classList.add('title-hunter');
                            userTitleClosed.classList.add('title-hunter'); // Ï∂îÍ∞Ä
                            break;
                        case "üõ†Ô∏è ÎîîÎ≤ÑÍπÖ ÎßàÏä§ÌÑ∞":
                            selectedTitle.classList.add('title-debug');
                            userTitleClosed.classList.add('title-debug'); // Ï∂îÍ∞Ä
                            break;
                        case "üêÜ wild-mental":
                            selectedTitle.classList.add('title-wild-mental');
                            userTitleClosed.classList.add('title-wild-mental'); // Ï∂îÍ∞Ä
                            break;
                    }
                    // ÏÑ†ÌÉùÎêú Ïπ≠Ìò∏ Ï†ÄÏû•
                    localStorage.setItem('selectedTitle', title);
                    console.log(`‚úÖ Ïπ≠Ìò∏ ÏÑ†ÌÉù: ${title}`);
                });
                dropdownMenu.appendChild(item);
                console.log(`Ïπ≠Ìò∏ Ï∂îÍ∞ÄÎê®: ${title}`);
            }
        }
    }

    let selectedEvent = null;
    function openModal(date, event) {
        const modal = document.getElementById('eventModal');
        const titleInput = document.getElementById('eventTitle');
        const categorySelect = document.getElementById('eventCategory');
        const memoInput = document.getElementById('eventMemo');
        const deleteBtn = document.getElementById('deleteEvent');
        window.selectedDate = date;
        if (modal && titleInput && categorySelect && memoInput && deleteBtn) {
            if (event) {
                selectedEvent = event;
                titleInput.value = event.title.split(' (')[0];
                categorySelect.value = event.title.match(/\(([^)]+)\)/)?.[1] || 'Java';
                memoInput.value = event.extendedProps.memo || '';
                deleteBtn.style.display = event.extendedProps.isHoliday ? 'none' : 'inline';
            } else {
                selectedEvent = null;
                titleInput.value = '';
                categorySelect.value = 'Java';
                memoInput.value = '';
                deleteBtn.style.display = 'none';
            }
            modal.style.display = 'block';
        }
    }

    const closeBtn = document.querySelector('.close');
    if (closeBtn) {
        closeBtn.onclick = function() {
            const modal = document.getElementById('eventModal');
            if (modal) modal.style.display = 'none';
        };
    }

    const eventForm = document.getElementById('eventForm');
    if (eventForm) {
        eventForm.onsubmit = function(e) {
            e.preventDefault();
            const title = document.getElementById('eventTitle').value.trim();
            const category = document.getElementById('eventCategory').value;
            const memo = document.getElementById('eventMemo').value.trim();
            const date = window.selectedDate;
            if (!title) {
                alert('ÏùºÏ†ïÏùÑ ÏûÖÎ†•ÌïòÏãúÏò§');
                return;
            }
            const events = JSON.parse(localStorage.getItem('events') || '{}');
            if (selectedEvent) {
                selectedEvent.remove();
                if (!events[date]) events[date] = [];
                events[date] = events[date].filter(ev => ev.title !== selectedEvent.title.split(' (')[0]);
                alert('ÏùºÏ†ïÏù¥ ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§!');
            } else {
                alert('ÏùºÏ†ïÏù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!');
            }
            if (!events[date]) events[date] = [];
            events[date].push({ title, category, memo, completed: false });
            localStorage.setItem('events', JSON.stringify(events));
            calendarInstance.addEvent({
                title: `${title} (${category})`,
                start: date,
                allDay: true,
                backgroundColor: categoryColors[category],
                borderColor: categoryColors[category],
                extendedProps: { memo, completed: false }
            });
            const modal = document.getElementById('eventModal');
            if (modal) modal.style.display = 'none';
            eventForm.reset();
        };
    }

    const deleteEventBtn = document.getElementById('deleteEvent');
    if (deleteEventBtn) {
        deleteEventBtn.onclick = function() {
            if (selectedEvent && !selectedEvent.extendedProps.isHoliday && confirm('ÏùºÏ†ïÏùÑ Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                const date = window.selectedDate;
                const events = JSON.parse(localStorage.getItem('events') || '{}');
                events[date] = events[date].filter(ev => ev.title !== selectedEvent.title.split(' (')[0]);
                if (events[date].length === 0) delete events[date];
                localStorage.setItem('events', JSON.stringify(events));
                selectedEvent.remove();
                const modal = document.getElementById('eventModal');
                if (modal) modal.style.display = 'none';
                alert('ÏùºÏ†ïÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§!');
            }
        };
    }

    window.getQueryParam = function(name) {
        const params = new URLSearchParams(window.location.search);
        return params.get(name);
    };

    window.renderEvents = function(selectedDate, events) {
        const eventList = document.getElementById('event-list');
        const doneList = document.getElementById('done-list');
        if (!eventList || !doneList) return;
        eventList.innerHTML = '';
        doneList.innerHTML = '';
        if (selectedDate && events[selectedDate] && Array.isArray(events[selectedDate])) {
            events[selectedDate].forEach((event, index) => {
                const li = document.createElement('li');
                li.className = 'event-item';
                if (event.completed) {
                    li.innerHTML = `
                        <span>${event.title} (${event.category})</span>
                        <button class="edit-btn" data-index="${index}">ÏàòÏ†ï</button>
                        <button class="delete-btn" data-index="${index}">ÏÇ≠Ï†ú</button>
                    `;
                    doneList.appendChild(li);
                } else {
                    li.innerHTML = `
                        <input type="checkbox" data-index="${index}" ${event.completed ? 'checked' : ''}>
                        <span>${event.title} (${event.category})</span>
                        <button class="edit-btn" data-index="${index}">ÏàòÏ†ï</button>
                        <button class="delete-btn" data-index="${index}">ÏÇ≠Ï†ú</button>
                    `;
                    eventList.appendChild(li);
                }
            });
        }
        if (eventList.children.length === 0) {
            const li = document.createElement('li');
            li.className = 'no-events';
            li.textContent = 'ÏùºÏ†ïÏùÑ Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî!';
            eventList.appendChild(li);
        }
        if (doneList.children.length === 0) {
            const li = document.createElement('li');
            li.className = 'no-events';
            li.textContent = 'ÏôÑÎ£åÎêú Ìï≠Î™©Ïù¥ ÏóÜÏäµÎãàÎã§.';
            doneList.appendChild(li);
        }
    };

    window.saveAndClose = function() {
        const selectedDate = window.getQueryParam('date');
        const events = JSON.parse(localStorage.getItem('events') || '{}');
        if (window.opener && window.opener.calendar) {
            window.opener.calendar.refetchEvents();
        }
        window.close();
    };

    if (document.querySelector('.event')) {
        const selectedDate = window.getQueryParam('date');
        const events = JSON.parse(localStorage.getItem('events') || '{}');
        const eventDateElement = document.getElementById('event-date');
        if (eventDateElement) eventDateElement.textContent = selectedDate ? `üìÖ ${selectedDate}` : 'ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî';
        window.renderEvents(selectedDate, events);
        const addBtn = document.getElementById('add-btn');
        function addEventHandler() {
            const title = document.getElementById('new-title')?.value.trim();
            const category = document.getElementById('new-category')?.value;
            if (title && selectedDate) {
                if (!events[selectedDate]) events[selectedDate] = [];
                events[selectedDate].push({ title, category, completed: false });
                localStorage.setItem('events', JSON.stringify(events));
                if (window.opener && window.opener.addEventToCalendar) {
                    window.opener.addEventToCalendar(selectedDate, title, category);
                }
                window.renderEvents(selectedDate, events);
                document.getElementById('new-title').value = '';
            }
        }
        if (addBtn) {
            addBtn.addEventListener('click', addEventHandler);
        }
        const eventContainer = document.querySelector('.event');
        if (eventContainer) {
            eventContainer.addEventListener('click', function(e) {
                const target = e.target;
                const index = target.dataset.index;
                if (index === undefined) return;
                if (target.type === 'checkbox') {
                    const wasCompleted = events[selectedDate][index].completed;
                    events[selectedDate][index].completed = target.checked;
                    localStorage.setItem('events', JSON.stringify(events));
                    window.renderEvents(selectedDate, events);
                    if (!wasCompleted && target.checked && window.opener && window.opener.completeEvent) {
                        console.log(`Ï≤¥ÌÅ¨Î∞ïÏä§ ÏôÑÎ£å: ${selectedDate}, ${index}`);
                        window.opener.completeEvent(selectedDate, index);
                    }
                    if (window.opener && window.opener.calendar) {
                        window.opener.calendar.refetchEvents();
                    }
                } else if (target.classList.contains('edit-btn')) {
                    const event = events[selectedDate][index];
                    const titleInput = document.getElementById('new-title');
                    const categorySelect = document.getElementById('new-category');
                    const addBtn = document.getElementById('add-btn');
                    titleInput.value = event.title;
                    categorySelect.value = event.category;
                    addBtn.textContent = 'ÏàòÏ†ï Ï†ÄÏû•';
                    addBtn.dataset.editIndex = index;
                    addBtn.removeEventListener('click', addEventHandler);
                    addBtn.addEventListener('click', function editHandler() {
                        const newTitle = titleInput.value.trim();
                        const newCategory = categorySelect.value;
                        if (newTitle) {
                            events[selectedDate][index].title = newTitle;
                            events[selectedDate][index].category = newCategory;
                            localStorage.setItem('events', JSON.stringify(events));
                            if (window.opener && window.opener.calendar) {
                                window.opener.calendar.refetchEvents();
                            }
                            window.renderEvents(selectedDate, events);
                            titleInput.value = '';
                            addBtn.textContent = '+';
                            delete addBtn.dataset.editIndex;
                            addBtn.removeEventListener('click', editHandler);
                            addBtn.addEventListener('click', addEventHandler);
                        }
                    }, { once: true });
                } else if (target.classList.contains('delete-btn')) {
                    if (confirm('Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                        events[selectedDate].splice(index, 1);
                        if (events[selectedDate].length === 0) delete events[selectedDate];
                        localStorage.setItem('events', JSON.stringify(events));
                        window.renderEvents(selectedDate, events);
                        if (window.opener && window.opener.calendar) {
                            window.opener.calendar.refetchEvents();
                        }
                    }
                }
            });
        }
    }

    // Î≤ÑÍ∑∏ÌóåÌÑ∞ Í≤åÏûÑÏ¢ÖÎ£åÏãú, game.jsÏóêÏÑú Î©îÏÑ∏ÏßÄ Î∞õÏïÑ Î™®Îã¨Ï∞Ω Îã´Ïùå
    window.addEventListener("message", function(event) {
        if (event.data.action === "closeModal") {
            var modalElement = document.getElementById('gameModal');
            var modalInstance = bootstrap.Modal.getInstance(modalElement);

            if (modalInstance) {
                modalInstance.hide();
                console.log("gameÌéòÏù¥ÏßÄÎ°úÎ∂ÄÌÑ∞ Î©îÏÑ∏ÏßÄÎ•º Î∞õÏïÑ Î™®Îã¨ Îã´Ìûò");
            }
        }
    });

    // Î™®Îã¨ Ïó¥Í∏∞ Î∞è iframe ÏÉàÎ°ú Î°úÎìú
    const modal = document.getElementById("gameModal");
    const gameFrame = document.getElementById("gameFrame");


    // Î™®Îã¨ Ïù¥Î≤§Ìä∏ ÎîîÎ≤ÑÍπÖ
    const modalEl = document.getElementById('gameModal');
    if (modalEl) {
        modalEl.addEventListener('shown.bs.modal', function () {
            console.log("‚úÖ Î™®Îã¨Ïù¥ Ïó¥Î¶º");
            const iframe = document.getElementById('gameFrame');
            gameFrame.src = `./game/game.html?t=${new Date().getTime()}`; // Î™®Îã¨ Ïó¥Î¶¥ÎïåÎßàÎã§ ÏÉàÎ°úÍ≥†Ïπ®
            iframe.onload = function() {
                console.log("‚úÖ Í≤åÏûÑ iframe Î°úÎìú ÏôÑÎ£å");
            };
            iframe.onerror = function() {
                console.error("‚ùå Í≤åÏûÑ iframe Î°úÎìú Ïã§Ìå®");
                iframe.contentDocument.body.innerHTML = "<h1>Í≤åÏûÑ Î°úÎìú Ïã§Ìå®</h1>";
            };
        });
        modalEl.addEventListener('hidden.bs.modal', function () {
            gameFrame.src = ""; //iframe ÎπÑÏõåÏÑú Î©îÎ™®Î¶¨ Ï†àÏïΩ
            console.log("‚úÖ Î™®Îã¨Ïù¥ Îã´Ìûò");
        });
    }

    initializeTitles();
    updateMedals();
    updateLevelAndExp();
    console.log("addEventListener Ïã§Ìñâ ÏôÑÎ£å");
});

function loadEventsFromLocalStorage() {
    try {
        const events = JSON.parse(localStorage.getItem('events') || '{}');
        const eventList = [];
        for (const date in events) {
            // ÏàòÏ†ï: events[date]Í∞Ä Î∞∞Ïó¥Ïù∏ÏßÄ ÌôïÏù∏
            const dateEvents = Array.isArray(events[date]) ? events[date] : [];
            dateEvents.forEach(event => {
                eventList.push({
                    title: `${event.title} (${event.category})`,
                    start: date,
                    allDay: true,
                    backgroundColor: categoryColors[event.category] || '#000000', // Í∏∞Î≥∏ ÏÉâÏÉÅ Ï∂îÍ∞Ä
                    borderColor: categoryColors[event.category] || '#000000',
                    extendedProps: { memo: event.memo || '', completed: event.completed || false }
                });
            });
        }
        return eventList;
    } catch (error) {
        console.error('Ïù¥Î≤§Ìä∏ Î°úÎìú Ïã§Ìå®:', error);
        return [];
    }
}